<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郑保乐的博客</title>
  
  <subtitle>James&#39; Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://james.letec.top/"/>
  <updated>2018-05-13T08:14:37.905Z</updated>
  <id>https://james.letec.top/</id>
  
  <author>
    <name>郑保乐</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式学习笔记（13）中介者</title>
    <link href="https://james.letec.top/2018/05/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8813%EF%BC%89%E4%B8%AD%E4%BB%8B%E8%80%85/"/>
    <id>https://james.letec.top/2018/05/13/设计模式学习笔记（13）中介者/</id>
    <published>2018-05-13T06:20:00.000Z</published>
    <updated>2018-05-13T08:14:37.905Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>中介者（Mediator）模式是用来降低多个对象和类之间的通信复杂性的。这种模式中通常提供一个充当中介者角色的类，用来承担“中心化”或“集中化”的职能，与各个对象之间都可以分别相互通信，它的一大优势是减少或避免其他对象之间的互相通信，在通信方面降低了耦合度。<br><a id="more"></a></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>现在要举行一场派对，派对中会穿插各种游戏活动，凡是参加派对的人都要到派对举办者那里登记。并且，每次有参与者想要参加派对中的某个活动的时候都要先向派对举办者提出请求，由举办者来批准他的请求，然后这个活动才开始进行。</p><p>先定义派对举办者行为的接口，举办者的职责有邀请成员加入和批准成员参加活动</p><p>Party.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Party</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addMember</span><span class="params">(PartyMember member)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">letAct</span><span class="params">(PartyMember member, Activity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是派对成员的接口，成员的职责有参加派对、提出参加活动的请求以及参加活动</p><p>PartyMember.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">joinParty</span><span class="params">(Party party)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">partyActivity</span><span class="params">(Activity activity)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">act</span><span class="params">(Activity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个类来具体实现派对举办者功能</p><p>PartyImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PartyImpl</span> <span class="keyword">implements</span> <span class="title">Party</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;PartyMember&gt; members;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PartyImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    members = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(PartyMember member)</span> </span>&#123;</span><br><span class="line">    members.add(member);</span><br><span class="line">    member.joinParty(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">letAct</span><span class="params">(PartyMember member, Activity activity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (PartyMember m : members) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!member.equals(m)) &#123;</span><br><span class="line">        m.partyActivity(activity);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个派对实现成员接口的抽象类，保留一个 <code>toString()</code> 抽象方法，留到其具体子类中实现</p><p>AbstractPartyMember.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPartyMember</span> <span class="keyword">implements</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AbstractPartyMember.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Party party;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">joinParty</span><span class="params">(Party party)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125;加入了派对"</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.party = party;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != activity) &#123;</span><br><span class="line">      LOGGER.info(<span class="string">"&#123;&#125;提议进行&#123;&#125;活动"</span>, <span class="keyword">this</span>, activity);</span><br><span class="line">      party.letAct(<span class="keyword">this</span>, activity);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">partyActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"进行派对活动，名称：&#123;&#125;，介绍：&#123;&#125;"</span>, activity, activity.getDescription());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>派对中提供的活动有射击、猜灯谜、桌游和唱歌，为其定义一个枚举类</p><p>Activity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Activity &#123;</span><br><span class="line">  SHOOT(<span class="string">"射击"</span>, <span class="string">"Shooting"</span>), GUESS(<span class="string">"猜灯谜"</span>, <span class="string">"Guess"</span>), DESKTOP_GAME(<span class="string">"桌游"</span>, <span class="string">"Desktop games"</span>), SING(<span class="string">"唱歌"</span>, <span class="string">"singing"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">  Activity(String name, String description) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有四种不同职业或特点的参与者，分别继承自 <code>AbstractPartyMember</code> 类，分别覆盖了父类中的 <code>toString()</code> 方法来表示其特征</p><p>他们分别是 <code>Officer.java</code>,<code>Oldman.java</code>,<code>Student.java</code> 和 <code>Businessman.java</code>，此处省略具体代码</p><p>现在来举办一次派对，参与者们分别向派对举办者提出活动请求，举办者分别批准</p><p>App.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Application.class);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//   派对举办者</span></span><br><span class="line">    Party party = <span class="keyword">new</span> PartyImpl();</span><br><span class="line">    <span class="comment">// 学生</span></span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    <span class="comment">// 官员</span></span><br><span class="line">    Officer officer = <span class="keyword">new</span> Officer();</span><br><span class="line">    <span class="comment">// 商人</span></span><br><span class="line">    Businessman businessman = <span class="keyword">new</span> Businessman();</span><br><span class="line">    <span class="comment">// 老人</span></span><br><span class="line">    Oldman oldman = <span class="keyword">new</span> Oldman();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 邀请成员加入</span></span><br><span class="line">    party.addMember(student);</span><br><span class="line">    party.addMember(officer);</span><br><span class="line">    party.addMember(businessman);</span><br><span class="line">    party.addMember(oldman);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分别提出参加活动的请求</span></span><br><span class="line">    student.act(Activity.DESKTOP_GAME);</span><br><span class="line">    officer.act(Activity.GUESS);</span><br><span class="line">    businessman.act(Activity.SHOOT);</span><br><span class="line">    oldman.act(Activity.SING);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>需要使用中介者模式的场景是对象与对象之间存在大量的关联关系，这样下去会导致系统的结构变得复杂，一个对象的改动势必会影响到另一个与之关联的对象，，同时做出相应的改动，它们之间分别相互耦合，几乎形成了“网状”的结构，这对于复杂的系统是非常不利的。</p><p>中介者模式可以将这种 “网状结构” 解耦形成 “星形结构”，最典型的应用实例就是 MVC 结构，其中的 C （控制器） 就担当了 V（视图）和 M（模型）之间的中介者。</p><p>中介者模式的缺点是会使中介者对象异常复杂，降低了可维护性，所以应当尽量避免在对象间的职责划分比较难以界定的场景中使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中介者（Mediator）模式是用来降低多个对象和类之间的通信复杂性的。这种模式中通常提供一个充当中介者角色的类，用来承担“中心化”或“集中化”的职能，与各个对象之间都可以分别相互通信，它的一大优势是减少或避免其他对象之间的互相通信，在通信方面降低了耦合度。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（12）迭代器</title>
    <link href="https://james.letec.top/2018/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8812%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://james.letec.top/2018/05/09/设计模式学习笔记（12）迭代器/</id>
    <published>2018-05-09T12:13:20.000Z</published>
    <updated>2018-05-11T13:23:33.790Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>迭代器（Iterator）模式又称游标模式，是集合类型对外提供统一的顺序访问元素而隐藏内部的实现细节的一种方式，是一种行为模式。<br><a id="more"></a><br>迭代器在 Java 的集合类中非常常见，我们使用迭代器来遍历集合中的每一个元素。迭代器在 ArrayList 的使用通常是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] array = <span class="keyword">new</span> String[]&#123;<span class="string">"百度"</span>, <span class="string">"阿里"</span>, <span class="string">"腾讯"</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(array);</span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">百度</span><br><span class="line">阿里</span><br><span class="line">腾讯</span><br></pre></td></tr></table></figure></p><p>我们使用 Iterator 接口的一个实例来访问这个 List 实例，Iterator 接口非常小巧，定义了两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否有后继元素</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 获取下一个元素的引用，执行此方法后，“游标”自动向后移动</span></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 中的“容器”类的之间的关系：</p><p><img src="https://upload-images.jianshu.io/upload_images/7134080-3bb3c992f92b829d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Collection 接口继承自 Iterable:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以可以理解为所有的集合都是可遍历的，因为集合就是一系列元素的“容器”。而 Collection 接口中的 iterator() 方法返回一个 Iterator 接口的引用，所以可以对所有的 Collection 的子类调用 iterator() 方法来获取这个容器实例的迭代器。对于不同的容器的实现，其内部数据结构是不同的，所以具体的迭代方式自然也不尽相同，但是它们都通过这个统一的接口方法来获取迭代器，迭代的实现被巧妙的隐藏了。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>现实生活中有一个常用的场景和迭代器的工作方式非常相似，那就是在图书馆中寻找自己想要的一本书，我们通常的做法是找到这个类目的书架，然后按一定的顺序一本一本的找，这个过程可以大致视为迭代器遍历书架这个容器。</p><p>我们把这个书架上的书分为三个大类：IT、小说和卡通，用一个枚举类来表示：</p><p>ItemType.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ItemType &#123;</span><br><span class="line">  IT, FICTION, CARTOON</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>和 JDK 中提供给我们的 Iterator 接口类似，我们也定义一个 Iterator 接口：</p><p>ItemIterator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemIterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Item <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个书架类 BookShelf，它持有一个 List<itemtype> 类型的引用，表示书架上所有图书的集合：</itemtype></p><p>BookShelf.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;Item&gt; items;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BookShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.FICTION, <span class="string">"西游记"</span>));</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.FICTION, <span class="string">"水浒传"</span>));</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.FICTION, <span class="string">"三国演义"</span>));</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.FICTION, <span class="string">"红楼梦"</span>));</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.CARTOON, <span class="string">"阿衰"</span>));</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.CARTOON, <span class="string">"七龙珠"</span>));</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.CARTOON, <span class="string">"火影忍者"</span>));</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.IT, <span class="string">"设计模式-可复用面向对象软件的基础"</span>));</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.IT, <span class="string">"重构-改善既有代码的设计"</span>));</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.IT, <span class="string">"Effective Java"</span>));</span><br><span class="line">    items.add(<span class="keyword">new</span> Item(ItemType.IT, <span class="string">"Java编程思想"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">getItemList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.addAll(items);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来定义专门为 BookShelf 服务的迭代器，它实现 ItemIterator 接口：</p><p>BookShelfIterator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelfIterator</span> <span class="keyword">implements</span> <span class="title">ItemIterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ItemType type;</span><br><span class="line">  <span class="keyword">private</span> BookShelf shelf;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BookShelfIterator</span><span class="params">(ItemType type, BookShelf shelf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.shelf = shelf;</span><br><span class="line">    <span class="keyword">this</span>.idx = -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span> != getNexIdx();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    idx = getNexIdx();</span><br><span class="line">    <span class="keyword">if</span> (-<span class="number">1</span> != idx) &#123;</span><br><span class="line">      <span class="keyword">return</span> shelf.getItemList().get(idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNexIdx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = shelf.getItemList();</span><br><span class="line">    <span class="keyword">int</span> tempIdx = idx;</span><br><span class="line">    <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!found) &#123;</span><br><span class="line">      tempIdx++;</span><br><span class="line">      <span class="keyword">if</span> (tempIdx &gt;= list.size()) &#123;</span><br><span class="line">        tempIdx = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (list.get(tempIdx).getType().equals(type)) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempIdx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们间接的使用了 List 接口提供的方法 get() 来获取第 n 个元素，其内部实现同样被隐藏了，这里只是演示遍历的过程，因此不必考虑 List 的内部数据结构。</p><p>显然，这和 Collection 中的结构是不同的，BookShelfIterator 持有 BookShelf 的引用，而不是由 BookShelf 来生成适用于它自身的迭代器，虽然看起来比较别扭，不过还是符合实际情况的，迭代器要拿到书架这个对象才能遍历它。如果大范围的使用，还是应当仿照 Collection 中的设计思路，避免出现过多的类，给系统的复杂度造成负担。</p><p>现在拿一个装满书的书架来试一下这个迭代器的效果：</p><p>App.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Application.class);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查找小说</span></span><br><span class="line">    ItemIterator iterator = <span class="keyword">new</span> BookShelfIterator(ItemType.FICTION, <span class="keyword">new</span> BookShelf());</span><br><span class="line">    LOGGER.info(<span class="string">"正在查找小说类图书"</span>);</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">      Item nextItem = iterator.next();</span><br><span class="line">      LOGGER.info(<span class="string">"找到了符合条件的图书，书名为：&#123;&#125;"</span>, nextItem.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找IT</span></span><br><span class="line">    ItemIterator iterator2 = <span class="keyword">new</span> BookShelfIterator(ItemType.IT, <span class="keyword">new</span> BookShelf());</span><br><span class="line">    LOGGER.info(<span class="string">"正在查找IT类图书"</span>);</span><br><span class="line">    <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">      Item nextItem = iterator2.next();</span><br><span class="line">      LOGGER.info(<span class="string">"找到了符合条件的图书，书名为：&#123;&#125;"</span>, nextItem.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找漫画</span></span><br><span class="line">    ItemIterator iterator3 = <span class="keyword">new</span> BookShelfIterator(ItemType.CARTOON, <span class="keyword">new</span> BookShelf());</span><br><span class="line">    LOGGER.info(<span class="string">"正在查找漫画类图书"</span>);</span><br><span class="line">    <span class="keyword">while</span> (iterator3.hasNext()) &#123;</span><br><span class="line">      Item nextItem = iterator3.next();</span><br><span class="line">      LOGGER.info(<span class="string">"找到了符合条件的图书，书名为：&#123;&#125;"</span>, nextItem.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>迭代器模式提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。迭代器模式关乎遍历集合的解决思路是把游标在元素之间移动的职责转交给迭代器，而不是集合对象自己。</p><p>迭代器模式的优点有：<br>1、它支持以不同的方式遍历一个集合合对象<br>2、迭代器模式简化了集合类<br>3、在同一个聚合上可以有多个遍历<br>4、使用迭代器模式，新建聚合类和迭代器，无须修改原有代码</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;迭代器（Iterator）模式又称游标模式，是集合类型对外提供统一的顺序访问元素而隐藏内部的实现细节的一种方式，是一种行为模式。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（11）解释器</title>
    <link href="https://james.letec.top/2018/05/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8811%EF%BC%89%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <id>https://james.letec.top/2018/05/01/设计模式学习笔记（11）解释器/</id>
    <published>2018-05-01T08:11:10.000Z</published>
    <updated>2018-05-09T11:45:34.840Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>解释器（Interpreter）模式提供了校验语言的语法或表达式的途径，它属于行为型模式的一种。这种模式通常会提供一个表达式接口，通过这个接口可以解释对应特定环境的上下文。</p><p>解释器模式在日常开发的过程中不是很常用，但它在 SQL 解析、符号处理引擎、编译程序等场景中使用非常广泛。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>给定一个语言，解释器模式可以定义出其文法的一种表示,并定义一个解释器，该解释器使用该表示来解释语言中的句子。举个简单的例子，在某种计算器中输入 <code>5+1-3*2</code>，每输入一个字符，屏幕上都会显示当前的结果，和这种计算器不同的是另外一种，即一次性输入 <code>5+1-3*2</code> 然后点击 <code>=</code>，直接得出最终结果，后面这种计算器就用到了解释器。</p><p>我们输入的这一系列符号可以用二叉树的形式来表示，比如 <code>5+1-3*2</code>：</p><p><img src="https://upload-images.jianshu.io/upload_images/7134080-69cbcd75f8495529.png" alt=""></p><p>这个二叉树就是一个简单的语法树，在一般的计算机程序设计语言的编译过程中，通常都包含类似的语法树生成的过程。</p><p>图中的 <code>5</code>、 <code>1</code>、 <code>3</code>、 <code>2</code> 都叫做 <strong>终结符表达式</strong>，所谓终结符就是本身不能再推导出其他符号了，图中的 <code>+</code>、 <code>-</code>、 <code>*</code> 这些四则运算符号就是 <strong>非终结符表达式</strong> 了，因为可以由这些符号分别展开，形成各自的子表达式。对于四则运算表达式，解析的结果就是运算结果，所以运算符号可以抽象出一个接口，包含一个返回值为整数（假设只有整数参与运算）的 <code>interpret()</code> 方法。</p><p>Expression.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于加减乘除解释的出来的运算结果显然是不同的，所以分别实现这个接口形成四个类，四则运算符号需要左右两个操作数才能进行解释运算，所以每个运算符都持有两个符号的引用，分别作为其左运算数和右运算数：</p><p>加号，PlusExpression.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlusExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Expression expressionLeft;</span><br><span class="line">  <span class="keyword">private</span> Expression expressionRight;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PlusExpression</span><span class="params">(Expression expressionLeft, Expression expressionRight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.expressionLeft = expressionLeft;</span><br><span class="line">    <span class="keyword">this</span>.expressionRight = expressionRight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> expressionLeft.interpret() + expressionRight.interpret();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"+"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>减号，MinusExpression.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinusExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Expression expressionLeft;</span><br><span class="line">  <span class="keyword">private</span> Expression expressionRight;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MinusExpression</span><span class="params">(Expression expressionLeft, Expression expressionRight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.expressionLeft = expressionLeft;</span><br><span class="line">    <span class="keyword">this</span>.expressionRight = expressionRight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> expressionLeft.interpret() - expressionRight.interpret();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"-"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乘号，MultipleExpression.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Expression expressionLeft;</span><br><span class="line">  <span class="keyword">private</span> Expression expressionRight;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MultipleExpression</span><span class="params">(Expression expressionLeft, Expression expressionRight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.expressionLeft = expressionLeft;</span><br><span class="line">    <span class="keyword">this</span>.expressionRight = expressionRight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> expressionLeft.interpret() * expressionRight.interpret();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"*"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除号，DivisionExpression.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivisionExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Expression expressionLeft;</span><br><span class="line">  <span class="keyword">private</span> Expression expressionRight;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DivisionExpression</span><span class="params">(Expression expressionLeft, Expression expressionRight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.expressionLeft = expressionLeft;</span><br><span class="line">    <span class="keyword">this</span>.expressionRight = expressionRight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> expressionLeft.interpret() / expressionRight.interpret();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于一个四则运算的算式，除了这四个四则运算符号，就是数字了，所以将数字抽象出一个数字符号类：</p><p>NumberExpression.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NumberExpression</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.number = number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NumberExpression</span><span class="params">(String numberString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.number = Integer.parseInt(numberString);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"数字"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上文中的算式用二叉树的形式表示，按顺序展开为一个字符序列，即 <code>- + * 5 1 3 2</code>，现在模仿计算器对其进行解释，这里用到了一点数据结构的知识，遍历二叉树通常采用 <strong>堆栈 (Stack)</strong> 结构来实现：</p><p>App.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Application.class);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      String tokenString = <span class="string">"- + * 5 1 3 2"</span>;</span><br><span class="line">      Stack&lt;Expression&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      String[] stringList = tokenString.split(<span class="string">" "</span>);</span><br><span class="line">      <span class="keyword">for</span> (String s : stringList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOperator(s)) &#123;</span><br><span class="line">          Expression expressionRight = stack.pop();</span><br><span class="line">          Expression expressionLeft = stack.pop();</span><br><span class="line">          LOGGER.info(<span class="string">"左操作数：&#123;&#125;，右操作数：&#123;&#125;"</span>, expressionLeft.interpret(), expressionRight.interpret());</span><br><span class="line">          Expression expression = getExpressionInstance(s, expressionLeft, expressionRight);</span><br><span class="line">          LOGGER.info(<span class="string">"操作符：&#123;&#125;"</span>, expression);</span><br><span class="line">          Expression result;</span><br><span class="line">          <span class="keyword">if</span> (expression != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = <span class="keyword">new</span> NumberExpression(expression.interpret());</span><br><span class="line">            LOGGER.info(<span class="string">"运算结果为：&#123;&#125;"</span>, result.interpret());</span><br><span class="line">            stack.push(result);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          NumberExpression expression = <span class="keyword">new</span> NumberExpression(s);</span><br><span class="line">          stack.push(expression);</span><br><span class="line">          LOGGER.info(<span class="string">"数字入栈：&#123;&#125;"</span>, expression.interpret());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断字符串是否为四则运算的操作符</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> s 待判断的字符串</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 是否为操作符</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.equals(<span class="string">"+"</span>) || s.equals(<span class="string">"-"</span>) || s.equals(<span class="string">"*"</span>) || s.equals(<span class="string">"/"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据字符串生成四则运算表达式</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> s               字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> expressionLeft  左表达式</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> expressionRight 右表达式</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 四则运算表达式</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">getExpressionInstance</span><span class="params">(String s, Expression expressionLeft, Expression expressionRight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isOperator(s)) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"+"</span>: &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> PlusExpression(expressionLeft, expressionRight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"-"</span>: &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> MinusExpression(expressionLeft, expressionRight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"*"</span>: &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> MultipleExpression(expressionLeft, expressionRight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"/"</span>: &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> DivisionExpression(expressionLeft, expressionRight);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>解释器主要运用方式就是解释语法树的节点，它将语法解释规则和实现结构，将复杂的解释工作指派到不同的解释器对象中，是什么语法就由什么解释器来解释。对于一棵生成好的语法树，通常由根节点开始解释，不断递归，依次选择适合子节点的解释器来进行解释。</p><p>解释器的应用场景：</p><ul><li>当一个语言需要解释执行，并可以将该语言中的句子表示为一个抽象语法树的时候，例如 XML 文件或正则表达式</li><li>一些重复出现的问题可以用一种简单的语言来进行表达</li><li>一个语言的文法较为简单，比如四则运算</li><li>当执行效率不是关键和主要关心的问题时可考虑解释器模式，因为大量使用递归循环调用，随着语法的复杂程度加剧，解释器的执行效率会非常低</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_
      
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（10）职责链</title>
    <link href="https://james.letec.top/2018/04/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8810%EF%BC%89%E8%81%8C%E8%B4%A3%E9%93%BE/"/>
    <id>https://james.letec.top/2018/04/26/设计模式学习笔记（10）职责链/</id>
    <published>2018-04-26T12:21:10.000Z</published>
    <updated>2018-05-02T07:51:11.709Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>职责链（Chain of Responsibility 亦译作 “责任链”）模式中，行为型模式的一种。它的具体特征是，几乎每个行为的实现者都持有职责链中下一个行为实现者的引用，在一个实现者无法完成指派给它的职责的时候，它就会将这一职责的请求传递给下一个实现者，多个传递关系就构成了一条职责链。</p><a id="more"></a><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>在一场海上演习中，作战指挥官负责把控全局，指挥协调舰队的各部分。指挥官发出指挥命令后，命令在各部门传递执行的过程就是一条职责链。比如，命令全体炮手做好开炮的准备，职责链就是这样的：指挥官-&gt;舰长-&gt;枪炮长-&gt;炮手，用序列图表示就是这样的：</p><p><img src="https://upload-images.jianshu.io/upload_images/7134080-2d5dc38288cbf3b0.png" alt="2018-04-27_135628.png"></p><p>按照 OOP 的惯例，我们又要开始抽象了，将责任链上的传递的消息进行抽象，形成一个 Request 类。指挥官会发布一系列类型的命令，包括行进、停止和射击，每个命令还包括一些其他的描述，比如命令的具体参数等。</p><p>Request.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> isHandled;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RequestType type;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">Request</span><span class="params">(String description, RequestType type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHandled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isHandled;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHandled</span><span class="params">(<span class="keyword">boolean</span> handled)</span> </span>&#123;</span><br><span class="line">    isHandled = handled;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestType <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">markRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setHandled(<span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getDescription();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> RequestType &#123;</span><br><span class="line">    <span class="comment">// 射击</span></span><br><span class="line">    SHOOTING,</span><br><span class="line">    <span class="comment">// 航行</span></span><br><span class="line">    SAILING,</span><br><span class="line">    <span class="comment">// 待命</span></span><br><span class="line">    AWAIT_ORDERS</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，职责链上每个节点的类都应当至少实现同一个命令处理接口，这个接口只有一个方法即 “处理请求”，这里就是根据上一级领导的命令作出具体的动作,这里用抽象类来实现：</p><p>RequestHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RequestHandler.class);</span><br><span class="line">  <span class="keyword">private</span> RequestHandler next;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RequestHandler</span><span class="params">(RequestHandler next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.next = next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != next) &#123;</span><br><span class="line">      next.handleRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printHandleMessage</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125;处理消息中，消息内容为：&#123;&#125;"</span>, <span class="keyword">this</span>, request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，这条职责链由谁来创建呢？如果这只队伍是指挥官组织起来的，那么当然要由指挥官来创建了，那么就有了这个指挥官类：</p><p>Commander.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Commander</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> RequestHandler chain;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Commander</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    createChain();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createChain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    chain = <span class="keyword">new</span> Captain(<span class="keyword">new</span> Gunny(<span class="keyword">new</span> Gunner(<span class="keyword">null</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">    chain.handleRequest(request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指挥官通过三种级别的成员的构造方法，构造出一条完整的职责链，然后将命令发送给链上的第一个节点，那么这条命令就会逐级传递下去，最终被执行了。</p><p>App.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Commander commander = <span class="keyword">new</span> Commander();</span><br><span class="line"></span><br><span class="line">    commander.handleRequest(<span class="keyword">new</span> Request(<span class="string">"正常航行"</span>, Request.RequestType.SAILING));</span><br><span class="line">    commander.handleRequest(<span class="keyword">new</span> Request(<span class="string">"原地待命"</span>, Request.RequestType.AWAIT_ORDERS));</span><br><span class="line">    commander.handleRequest(<span class="keyword">new</span> Request(<span class="string">"发射驱逐导弹"</span>, Request.RequestType.SHOOTING));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>职责链模式在现实世界中的应用：</p><ul><li>Tomcat 服务器对编码的处理</li><li>Spring MVC 的拦截器</li><li>Servlet 的 Filter</li></ul><p>客户端发送给服务器的请求由 Filter（过滤器）进行预先处理，多个不同功能的 Filter 构成一条 FilterChian，请求经过这条 FilterChian 处理后最终到达 Servlet，在这里被最终处理。</p><p>职责链模式的侧重点在单个环节上，它不过多的关注其他行为实现者的特征。职责链上的每个节点都至少持有下一个实现者的引用，和数据结构中的 “链表” 类似，链上的消息具有单项传递性，这个节点任务完成后将消息发送给链上的下一个节点，依次传递下去，最终构成一条职责链。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;职责链（Chain of Responsibility 亦译作 “责任链”）模式中，行为型模式的一种。它的具体特征是，几乎每个行为的实现者都持有职责链中下一个行为实现者的引用，在一个实现者无法完成指派给它的职责的时候，它就会将这一职责的请求传递给下一个实现者，多个传递关系就构成了一条职责链。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（9）命令</title>
    <link href="https://james.letec.top/2018/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%889%EF%BC%89%E5%91%BD%E4%BB%A4/"/>
    <id>https://james.letec.top/2018/04/25/设计模式学习笔记（9）命令/</id>
    <published>2018-04-25T14:00:20.000Z</published>
    <updated>2018-04-26T06:52:51.012Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>命令（Command）模式是一种数据驱动的设计模式，它属于行为型模式。请求被包装成一个命令对象，并由调用者传递给被调用对象。被调用对象寻找可以处理该命令的合适的处理对象，并把该命令传给这个处理对象，该处理对象执行命令。</p><p>命令模式中，命令的发出者和接收者是独立的，发出命令的职责和处理命令的职责被分别指派给不同的对象。命令模式解决了一般的调用过程中，“行为请求者”与“行为实现者” 之间的强耦合关系。比如某些场合中，需要对命令进行“撤销”、“重做”，亦或其他不得不以 “事务” 的形式实现的场合，命令发出者和命令实现者之间的解耦就显得至关重要了。</p><a id="more"></a><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>命令模式最常见的场景就是字处理软件了，软件必须允许使用者进行重做或撤销的操作，仿佛没有这种特性的字处理软件几乎不会有人乐意使用。</p><p>首先不考虑使用命令模式，而是以传统的对象间调用来实现这种需求。假设我们现在需要对某个字依次进行如下操作：增大字号、设置字体颜色为红色、设置为加粗，那么对于命令发出者，要处理的逻辑就是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if(改变字号)&#123;</span><br><span class="line">    if(增大字号)&#123;</span><br><span class="line">        字号渲染器.增大字号();</span><br><span class="line">    &#125;else if(减小字号)&#123;</span><br><span class="line">        字号渲染器.减小字号();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(改变颜色)&#123;</span><br><span class="line">    颜色渲染器.改变颜色(颜色);</span><br><span class="line">&#125;</span><br><span class="line">if(改变粗细)&#123;</span><br><span class="line">    if(加粗)&#123;</span><br><span class="line">        粗细渲染器.加粗();</span><br><span class="line">    &#125;else if(不加粗)&#123;</span><br><span class="line">        粗细渲染器.变细();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种 “紧耦合” 的结构下，行为请求者与行为实现者之间的关系大概是这样的：</p><p><img src="https://upload-images.jianshu.io/upload_images/7134080-2231f5ca9d53215b.png" alt=""></p><p>首先，所有命令都要有对应的处理者去执行，这就意味着行为请求者需要持有多个处理者的引用。这样，每修改或添加一个命令就必须修改行为请求者的逻辑，没办法实现对扩展开放。其次，如果要实现对命令的撤销或重做，那么本来就复杂的行为判断逻辑会变得愈发臃肿，对程序员来说这简直是一场灾难。</p><p>那么将行为请求者和行为实现者进行解耦后是怎样的呢？大概如图：</p><p><img src="https://upload-images.jianshu.io/upload_images/7134080-da88d063aeded303.png" alt=""></p><p>将行为请求者和行为实现者解耦，直观的改变就是：行为请求者不会直接调用行为实现者的具体方法，而是向行为实现者发出包含行为的具体命令，这个命令通常以对象的形式出现，他们之间传递的消息就是命令模式中的核心元素 —— “命令”，他在原始的行为请求者和行为实现者之间架起了一条高速公路，原来臃肿的逻辑判断代码得到了缩减，逻辑判断的职责被指派给了行为实现者，而行为请求者只需专注于发出正确的命令。</p><p>为了将使行为请求者和行为的具体实现解耦，应当将命令进行抽象。继续上面字处理软件的例子，用户发出的命令应当至少包含 “撤销” 和 “重做” 的功能，因此我们可以这样设计 “命令” 抽象类：</p><p>Command.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 撤销</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 重做</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">redo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增大字体的命令：</p><p>Enlarge.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Enlarge</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AbstractFont font;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Size oriSize;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Enlarge</span><span class="params">(AbstractFont font)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.font = font;</span><br><span class="line">    oriSize = font.getSize();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    font.setSize(Size.LARGE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    font.setSize(oriSize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使字体变红：</p><p>Rubify.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rubify</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AbstractFont font;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Color oriColor;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Rubify</span><span class="params">(AbstractFont font)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.font = font;</span><br><span class="line">    oriColor = font.getColor();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    font.setColor(Color.RED);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    font.setColor(oriColor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两种命令的共同点是都继承自命令抽象类，并持有一个行为实施对象的引用，也就是说，行为的具体实现过程被封装到了每个具体的命令中。</p><p>那么现在就需要一个行为请求者来发出命令了：</p><p>Typist.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Typist</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Typist.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Deque&lt;Command&gt; redoStack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> Deque&lt;Command&gt; undoStack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cast</span><span class="params">(Command command, AbstractFont font)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125;正在处理字体，命令为：&#123;&#125;，处理的字体为：&#123;&#125;"</span>, <span class="keyword">this</span>, command, font);</span><br><span class="line">    command.execute();</span><br><span class="line">    undoStack.offerLast(command);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!undoStack.isEmpty()) &#123;</span><br><span class="line">      Command previousCommand = undoStack.pollLast();</span><br><span class="line">      redoStack.offerLast(previousCommand);</span><br><span class="line">      LOGGER.info(<span class="string">"&#123;&#125;正在进行撤销操作，命令为：&#123;&#125;"</span>, <span class="keyword">this</span>, previousCommand);</span><br><span class="line">      previousCommand.undo();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      LOGGER.info(<span class="string">"没有可以撤销的操作了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!redoStack.isEmpty()) &#123;</span><br><span class="line">      Command previousCommand = redoStack.pollLast();</span><br><span class="line">      undoStack.offerLast(previousCommand);</span><br><span class="line">      LOGGER.info(<span class="string">"&#123;&#125;正在进行重做操作，命令为：&#123;&#125;"</span>, <span class="keyword">this</span>, previousCommand);</span><br><span class="line">      previousCommand.redo();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      LOGGER.info(<span class="string">"没有可以重做的操作了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们分别用两个队列来记录执行过的命令与撤销过的命令，“撤销” 操作对应 “已执行” 的操作， “重做” 操作对应 “已撤销” 的操作。每次执行命令，同时把命令放到 “撤销” 队列的队尾；同样的，每次执行 “撤销” 操作，也同时将命令放到 “重做” 队列的队尾。</p><p>为了方便 “观察” 字体的状态，我们将字体抽象成一个类：</p><p>AbstractFont.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFont</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AbstractFont.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Size size;</span><br><span class="line">  <span class="keyword">private</span> Color color;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Size <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(Size size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(Color color)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 打印当前状态</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"字体当前状态为：\t字体大小：&#123;&#125;\t颜色：&#123;&#125;"</span>, getSize(), getColor());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拉以为用户来试试这个字处理软件吧，我们在旁边观察字体的状态：</p><p>App.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Typist sizeTypist = <span class="keyword">new</span> Typist();</span><br><span class="line">    Typist colorTypist = <span class="keyword">new</span> Typist();</span><br><span class="line">    RegularScript font = <span class="keyword">new</span> RegularScript();</span><br><span class="line"></span><br><span class="line">    Command rubify = <span class="keyword">new</span> Rubify(font);</span><br><span class="line">    Command enlarge = <span class="keyword">new</span> Enlarge(font);</span><br><span class="line"></span><br><span class="line">    font.printStatus();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置字体颜色</span></span><br><span class="line">    colorTypist.cast(rubify, font);</span><br><span class="line">    font.printStatus();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置字体大小</span></span><br><span class="line">    sizeTypist.cast(enlarge, font);</span><br><span class="line">    font.printStatus();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 撤销颜色更改</span></span><br><span class="line">    colorTypist.undo();</span><br><span class="line">    font.printStatus();</span><br><span class="line">    colorTypist.undo();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 撤销大小更改</span></span><br><span class="line">    sizeTypist.undo();</span><br><span class="line">    font.printStatus();</span><br><span class="line">    sizeTypist.undo();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字体颜色重做</span></span><br><span class="line">    colorTypist.redo();</span><br><span class="line">    font.printStatus();</span><br><span class="line">    colorTypist.redo();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大小重做</span></span><br><span class="line">    sizeTypist.redo();</span><br><span class="line">    font.printStatus();</span><br><span class="line">    sizeTypist.redo();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察到的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">小字，黑色</span><br><span class="line">小字，红色</span><br><span class="line">大字，红色</span><br><span class="line">大字，黑色</span><br><span class="line">小字，黑色</span><br><span class="line">大字，黑色</span><br><span class="line">大字，红色</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>命令模式的主要适用场景有：</p><ul><li>需要将行为请求者和行为实现者解耦，使得请求者和行为作用对象不直接交互</li><li>需要在不同的时间发出请求、使请求排队以及执行队列中的请求</li><li>需要支持命令的撤销操作和重做等类似操作</li><li>需要将一组操作组合在一起，即实现宏命令</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;命令（Command）模式是一种数据驱动的设计模式，它属于行为型模式。请求被包装成一个命令对象，并由调用者传递给被调用对象。被调用对象寻找可以处理该命令的合适的处理对象，并把该命令传给这个处理对象，该处理对象执行命令。&lt;/p&gt;
&lt;p&gt;命令模式中，命令的发出者和接收者是独立的，发出命令的职责和处理命令的职责被分别指派给不同的对象。命令模式解决了一般的调用过程中，“行为请求者”与“行为实现者” 之间的强耦合关系。比如某些场合中，需要对命令进行“撤销”、“重做”，亦或其他不得不以 “事务” 的形式实现的场合，命令发出者和命令实现者之间的解耦就显得至关重要了。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（8）单例</title>
    <link href="https://james.letec.top/2018/04/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%888%EF%BC%89%E5%8D%95%E4%BE%8B/"/>
    <id>https://james.letec.top/2018/04/22/设计模式学习笔记（8）单例/</id>
    <published>2018-04-22T02:23:20.000Z</published>
    <updated>2018-04-23T09:54:24.828Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>单例（Singleton）模式是最常用的设计模式之一，但同时也是最能体现 Java 特性的设计模式之一，它是创建型模式中最经典的一个。</p><p>单例模式的核心目的是，保证一个类的实例只存在一个。许多场景中整个软件系统只需要拥有一个该类的全局对象，这是为了更好的实现这个对象的功能。一个常见的场景，服务器应用程序中，某些配置通常放在若干个文件中，某个类的一个单例对象将配置读取进来，以后每次需要获取配置信息只需要通过单例模式的风格获取这个对象，就能得到这些配置数据了。相反，如果每次需要获取配置信息都要 <code>new</code> 一个该类的对象并读取配置文件，那将造成许多本可以避免的性能开销。</p><a id="more"></a><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>单例模式的应用场景理解起来比较简单，就不举具体的例子了，我们来看几种常用的单例写法：</p><p>先来看最简单的，这里的 <code>Singleton</code>类只是为了演示单例的写法，实际中它还应当实现某些功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Single();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写完后，每次需要获取 <code>Singleton</code> 类的实例，就调用 <code>Singleton.getInstance()</code> 这个方法。这样写对于一般的使用是可以了，但并不能完全保证 <code>Singleton</code> 类的对象只存在一个，因为我们可以手动调用 <code>Singleton</code> 类的构造方法来实例化出一个 <code>Singleton</code> 对象。那么如何避免这个问题呢？一个常用的方法就是将 <code>Singleton</code> 类的构造方法私有化，使得它的构造方法防止被外部的类调用，即只能由自己的静态方法实例化自己:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细看一下方法，每次获取实例对象之前先进行判空，如果对象为 <code>null</code> 则实例化一个 <code>instance</code>，如果存在则直接返回该实例。这种方法的看似是完美的，即看似实例只存在一个。但是，在多线程运行的时候，如果两个不同的线程同时运行到判空操作，会各自分别创建一个实例，这样一来，这种写法的使用结果就不是能保证单例了。</p><p>为了保证只有一个线程，需要引入一个关键字 <code>synchronized</code>，它的作用是给其修饰的方法加上一把同步锁，当访问带有这个关键字的方法时，其他访问该方法的线程都会进入阻塞状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然这样写可以保证该类的实例只存在一个，但是这会使得除了执行这个方法的线程顺利执行外，其他所有线程都要等待，这会造成极大的系统开销，降低了程序的运行效率。所以这种方法代价过高，因为无论 instance 是否为 null ,每次执行时，整个方法都加上了锁，我们不妨将锁的范围尽可能的缩小，把对性能的影响降到最低，于是有了如下写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，只有当判断 <code>instance</code> 为 <code>null</code> 的时候才执行内层的同步代码块，同步代码块中的判空保证了不会产生多个实例。这样看似没问题了，但是在计算机中，有时为了提高运行效率，会对指令进行重排，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;          <span class="comment">//A</span></span><br><span class="line">a = <span class="number">3</span>;          <span class="comment">//B</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;      <span class="comment">//C</span></span><br><span class="line"><span class="keyword">int</span> c = a + b;  <span class="comment">//D</span></span><br></pre></td></tr></table></figure><p>可能会被重排成 A-C-B-D 或者 C-A-B-D，显然，重排之后是不影响程序最终的执行结果的，至于它究竟是如何提高运行效率的，我们暂时不考虑。回到 <code>Singleton</code> 的例子中， <code>instance</code> 对象势必会存在这样一种状态，即：已经为其分配了内存空间，但是并没有调用其构造方法进行实例化，就像上面代码中，语句 C 如果是判空，那么初始化就是语句 B，假如语句 C 赶在语句 B 之前执行了，a 确实不为空，但返回 a 一定会产生一个异常，因为它还没有被真正的初始化。</p><p>于是，诞生了终极写法 —— 引入 <code>volatile</code> 关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>volatile 关键字具有屏蔽指令重排的作用，即对 <code>instance</code> 加上了一把锁，在完成写操作之前不会允许其他线程对其进行任何读操作，即每次读取的内容都时实时的。因此，在初始化完成前，无法对其进行读操作，也就不会判断它是 <code>null</code> 了。</p><p>最后抛出一个神奇的方法，利用枚举类线程安全的特点，使用枚举类代替 <code>class</code>，这样使用起来不用考虑多线程的问题，是最方便的一种写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过枚举类获取单例的实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Singleton result = Singleton.INSTANCE;</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单例模式写法的要点：</p><ul><li>构造方法私有化</li><li>私有静态引用指向该类的实例</li><li>公有静态方法返回自己类的实例</li></ul><p>单例模式的应用场景主要有：</p><ul><li>一个类频繁的被实例化，但同时又频繁的被销毁</li><li>一个类的实例化过程非常耗费资源，且该类的对象频繁的被使用</li><li>类中的方法调用结果和类的状态有关</li><li>需要频繁访问网络、数据库或文件的类</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;单例（Singleton）模式是最常用的设计模式之一，但同时也是最能体现 Java 特性的设计模式之一，它是创建型模式中最经典的一个。&lt;/p&gt;
&lt;p&gt;单例模式的核心目的是，保证一个类的实例只存在一个。许多场景中整个软件系统只需要拥有一个该类的全局对象，这是为了更好的实现这个对象的功能。一个常见的场景，服务器应用程序中，某些配置通常放在若干个文件中，某个类的一个单例对象将配置读取进来，以后每次需要获取配置信息只需要通过单例模式的风格获取这个对象，就能得到这些配置数据了。相反，如果每次需要获取配置信息都要 &lt;code&gt;new&lt;/code&gt; 一个该类的对象并读取配置文件，那将造成许多本可以避免的性能开销。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（7）原型</title>
    <link href="https://james.letec.top/2018/04/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89%E5%8E%9F%E5%9E%8B/"/>
    <id>https://james.letec.top/2018/04/21/设计模式学习笔记（7）原型/</id>
    <published>2018-04-21T06:32:00.000Z</published>
    <updated>2018-04-26T06:52:52.824Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>原型（Prototype）模式用于创建重复的对象，与工厂模式类似。它们之间的区别是：工厂模式通过 <code>new</code> 关键字调用类的构造方法来创建对象，而原型模式采用复制已存在对象的方式创建新的对象。如果通过构造方法创建对象会造成一定程度上的性能问题，就应当考虑使用原型模式。例如，一个对象需在创建时需要进行读数据库的操作，并且这个对象需要被频繁的创建，那么就应当采用缓存的方式，在数据不更新的前提下，尽可能的使用缓存，也就是克隆的对象。</p><a id="more"></a><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>在 Java 中，原型模式一般通过 <code>java.lang.Object</code> 类提供的 <code>clone()</code> 方法来实现，那么我们就很容易联想到生物上的克隆技术了，最耳熟能详的成果就是克隆羊多利，那就以羊举例。首先定义 <code>Sheep</code> 类：</p><p>Sheep.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Sheep implements Cloneable &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Sheep <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sheep(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Sheep</code> 类通过重写父类 <code>Object</code> 提供的 <code>clone()</code> 方法创建一个新的 <code>Sheep</code> 实例，下面就试试这个克隆方法：</p><p>App.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">Sheep origin = <span class="keyword">new</span> Sheep(<span class="string">"团团"</span>);</span><br><span class="line">System.out.println(origin.getName());   </span><br><span class="line"><span class="comment">//&gt; 团团</span></span><br><span class="line"></span><br><span class="line">origin.setName(<span class="string">"圆圆"</span>);</span><br><span class="line">Sheep clone = origin.clone();</span><br><span class="line">System.out.println(clone.getName());    </span><br><span class="line"><span class="comment">//&gt; 圆圆</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用原型模式可以避免由于创建新的对象造成的性能开销，尽量使用克隆的方式创建新的对象。<br>原型模式适用于这些场景：</p><ul><li>当一个系统应该独立于它的产品创建，构成和表示时</li><li>当要实例化的类是在运行时指定时，例如，通过动态装载</li><li>为了避免创建一个与产品类层次平行的工厂类层次时</li><li>当一个类的实例只能有几个不同状态组合中的一种时，建立相应数目的原型并用他们克隆，这会比每次用具体的状态手动实例化更方便</li></ul><p>另外，<code>java.lang.Object</code> 类中的 <code>clone()</code> 方法是 <strong>native 方法</strong>，因此执行效率较高</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原型（Prototype）模式用于创建重复的对象，与工厂模式类似。它们之间的区别是：工厂模式通过 &lt;code&gt;new&lt;/code&gt; 关键字调用类的构造方法来创建对象，而原型模式采用复制已存在对象的方式创建新的对象。如果通过构造方法创建对象会造成一定程度上的性能问题，就应当考虑使用原型模式。例如，一个对象需在创建时需要进行读数据库的操作，并且这个对象需要被频繁的创建，那么就应当采用缓存的方式，在数据不更新的前提下，尽可能的使用缓存，也就是克隆的对象。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（6）工厂方法</title>
    <link href="https://james.letec.top/2018/04/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    <id>https://james.letec.top/2018/04/20/设计模式学习笔记（6）工厂方法/</id>
    <published>2018-04-20T04:32:00.000Z</published>
    <updated>2018-04-20T13:30:43.931Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>工厂方法（Factory Method)模式，又叫做虚拟构造（Virtual Constructor）模式或多态工厂(Polymorphic Factory）模式。工厂方法的特点是定义一个用于创建对象的接口， 让子类决定实例化哪一个类。 工厂方法使一个类的实例化延迟到其子类。</p><a id="more"></a><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>这次以顾客点餐为例，假设有两个厨师，一个只会做中餐，另一个只会做西餐，餐品分为熟食和生食两类。顾客需要顾客需要根据自己的口味来选择对应的厨师并告知其需要熟食还是生食，厨师根据顾客的口味来进行烹制。</p><p>厨师的职责就是烹制食物，所以定义一个厨师接口</p><p>Cook.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line">  <span class="function">Food <span class="title">cookFood</span><span class="params">(FoodType foodType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在简单的将食物赋予一个表示“冷或热”的属性，用枚举类型表示</p><p>FoodType.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> FoodType &#123;</span><br><span class="line">  HOT(<span class="string">"热的"</span>), COLD(<span class="string">"凉的"</span>);</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  FoodType(String foodType) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = foodType;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义食物接口</p><p>Food.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">  <span class="function">FoodType <span class="title">getFoodType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>食物有中餐和西餐之分，分别定义两个食物接口的实现类</p><p>ChineseFood.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseFood</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> FoodType foodType;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ChineseFood</span><span class="params">(FoodType foodType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.foodType = foodType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FoodType <span class="title">getFoodType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foodType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foodType.getName() + <span class="string">"中餐"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WesternFood.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WesternFood</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> FoodType foodType;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">WesternFood</span><span class="params">(FoodType foodType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.foodType = foodType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FoodType <span class="title">getFoodType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foodType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foodType.getName() + <span class="string">"西餐"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中餐厨师和西餐厨师分别烹制中餐和西餐，定义两个厨师接口的实现类</p><p>ChineseCook.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseCook</span> <span class="keyword">implements</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Food <span class="title">cookFood</span><span class="params">(FoodType foodType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ChineseFood(foodType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>WesternCook.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WesternCook</span> <span class="keyword">implements</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Food <span class="title">cookFood</span><span class="params">(FoodType foodType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WesternFood(foodType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“食物”产品的生产现在交给了“厨师工厂”来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cook cook1 = <span class="keyword">new</span> WesternCook();</span><br><span class="line">Cook cook2 = <span class="keyword">new</span> ChineseCook();</span><br><span class="line">Food food1 = cook1.cookFood(FoodType.COLD);</span><br><span class="line">Food food2 = cook2.cookFood(FoodType.HOT);</span><br></pre></td></tr></table></figure><p>本例只是单纯的演示工厂方法，因为对于这几个类而言，显然使用工厂方法模式比直接使用 <code>new</code> 关键字调用构造方法来说要复杂多了，所以简单对象的创建无需引入工厂模式，从而避免给系统带来更高的复杂度。</p><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><p>Java 的集合是一套优秀的数据结构设计，大部分集合类型都实现 <code>java.util.Collection</code> 接口，这个接口的父接口 <code>Iterable</code> 接口规定了所有的 Java 集合都必须提供一个 <code>iterator()</code> 方法，返还一个<code>Iterator</code> 类型的对象：</p><p>java.lang.Iterable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ArrayList</code> 是我们常用的一个 <code>Collection</code> 接口实现类，其 <code>iterator()</code> 方法实现如下：</p><p>java.util.ArrayList.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 返回一个 Iterator 对象，工厂方法的实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难看出，<code>ArrayList</code> 中的 <code>iterator()</code> 方法是具体工厂类的工厂方法，而 <code>Collection</code> 就是一个工厂接口。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在基于类的设计中，工厂方法模式通常作为创建模式来使用。它使用工厂方法来处理创建对象的过程，无需指定创建对象的确切类型。客户端通过调用工厂方法来创建对象，这里的方法是在接口中指定的，或是由子类实现的，或是由基类实现，或者通过子类进行方法覆盖，从头至尾无需调用具体类的构造方法。</p><p>工厂方法模式就是为了完全满足“开闭原则”，在上文点餐的例子中，当增加食物类型的时候，无需改动现有的代码，只要增加一个能够完成新类型食物烹饪工作的厨师类即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工厂方法（Factory Method)模式，又叫做虚拟构造（Virtual Constructor）模式或多态工厂(Polymorphic Factory）模式。工厂方法的特点是定义一个用于创建对象的接口， 让子类决定实例化哪一个类。 工厂方法使一个类的实例化延迟到其子类。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（5）抽象工厂</title>
    <link href="https://james.letec.top/2018/04/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/"/>
    <id>https://james.letec.top/2018/04/20/设计模式学习笔记（5）抽象工厂/</id>
    <published>2018-04-20T02:32:00.000Z</published>
    <updated>2018-04-20T08:44:11.230Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>抽象工厂模式是在工厂方法模式之上的有一次升级，以便能够处理更加复杂的对象创建场景。因此也是所有形态的工厂模式中最为抽象和最具一般性的一种形态。工厂 ( Factory ) 和产品 ( Product ) 是 Abstract Factory 模式的主要参与者。 该模式描述了怎样在不直接实例化类的情况下创建一系列相关的产品对象。 它最适用于产品对象的数目和种类不变， 而具体产品系列之间存在不同的情况。 我们通过实例化一个特定的具体工厂对象来选择产品系列， 并且以后一直使用该工厂生产产品对象。 我们也能够通过用一个不同的具体工厂实例来替换原来的工厂对象以改变整个产品系列。 抽象工厂模式对产品系列的强调使它区别于其他只与一种产品对象有关的创建性模式。</p><a id="more"></a><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>设想这样一种情景，一支远洋的队伍由船、船长以及水手组成，队伍有新人队伍和老兵队伍之分。新人的队伍有新船长、新水手以及崭新的船只；而老兵的队伍有老船长、经验丰富的老水手以及破旧的船只。不同队伍有着不同的特点，队伍中不同的部分之间存在一定的依赖。</p><p>首先定义“成员”接口，规定每个成员都可以描述自己的特性：</p><p>Member.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种具体成员的接口，它们都继承了“成员”接口:</p><p>Captain.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Captain</span> <span class="keyword">extends</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sailor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sailor</span> <span class="keyword">extends</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ship.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Ship</span> <span class="keyword">extends</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就是一个抽象工厂，它描述了如何“生产”一支队伍：</p><p>TeamFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeamFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Ship <span class="title">createShip</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Captain <span class="title">createCaptain</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Sailor <span class="title">createSailor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种不同的队伍工厂分别“生产”不同特性的队伍：</p><p>YoungTeamFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YoungTeamFactory</span> <span class="keyword">implements</span> <span class="title">TeamFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Ship <span class="title">createShip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> NewShip();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Captain <span class="title">createCaptain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> YoungCaptain();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sailor <span class="title">createSailor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> YoungSailor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PermanentTeamFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermanentTeamFactory</span> <span class="keyword">implements</span> <span class="title">TeamFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Ship <span class="title">createShip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OldShip();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Captain <span class="title">createCaptain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OldCaptain();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sailor <span class="title">createSailor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OldSailor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，一支队伍的“生产”就可以由这几步构成：创建具体特性的工厂，由工厂“生产”队伍：</p><p>App.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TeamFactory factory = <span class="keyword">new</span> YoungTeamFactory();</span><br><span class="line"></span><br><span class="line">Ship ship = factory.createShip();</span><br><span class="line">Captain = factory.createCaptain();</span><br><span class="line">Sailor = factory.createSailor();</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>抽象工厂的“抽象”指的就是：确定一个应用创建的对象的类，只关心生产什么产品而无需关注产品具体由哪些部件组成，更不需要关注产品具体是怎么生产出来的，它对某一类产品的生产过程制定了一个规则，所以抽象工厂并不关心具体组件的实现，而是只专注于接口。</p><p>关于抽象工厂模式和“开闭原则”：<br>如果需要重新组队，构成一支由新人和老人组成的混合队伍，那么只需要增加一种新的实现了 <code>TeamFactory</code> 接口的工厂即可，所以抽象工厂模式实现了“对扩展开放”。<br>但是，如果队伍中添加了一种新成员，比如“无线电操作员”，那么现有的所有接口都要跟着修改，所以它并没有实现“对修改关闭”。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;抽象工厂模式是在工厂方法模式之上的有一次升级，以便能够处理更加复杂的对象创建场景。因此也是所有形态的工厂模式中最为抽象和最具一般性的一种形态。工厂 ( Factory ) 和产品 ( Product ) 是 Abstract Factory 模式的主要参与者。 该模式描述了怎样在不直接实例化类的情况下创建一系列相关的产品对象。 它最适用于产品对象的数目和种类不变， 而具体产品系列之间存在不同的情况。 我们通过实例化一个特定的具体工厂对象来选择产品系列， 并且以后一直使用该工厂生产产品对象。 我们也能够通过用一个不同的具体工厂实例来替换原来的工厂对象以改变整个产品系列。 抽象工厂模式对产品系列的强调使它区别于其他只与一种产品对象有关的创建性模式。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（4）构建者</title>
    <link href="https://james.letec.top/2018/04/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89%E6%9E%84%E5%BB%BA%E8%80%85/"/>
    <id>https://james.letec.top/2018/04/20/设计模式学习笔记（4）构建者/</id>
    <published>2018-04-20T01:12:00.000Z</published>
    <updated>2018-04-20T06:08:28.859Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>构建者（Builder）模式通常用于将复杂对象的构造简化，将具体的构造过程与表示分离，使同样的构建过程可以创建不同的表示。使用多个简单的对象一步一步构建成一个复杂的对象，这种类型的设计模式属于创建型模式。建造模式可以将一个复杂对象的内部组成部分，与该对象本身的创建分离开来，从而使得复杂对象的组装更灵活。<br><a id="more"></a></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>设想一个场景，可以出现在游戏中，需要生成一个虚拟的人物模型，人物主要包括几个简单的属性：姓名、年龄、国籍以及肤色。假如一个数据模型的拥有很多属性，如果单纯使用构造方法来实例化对象，势必会造成构造方法参数爆炸的问题，也可以称之为“反可伸缩构造方法模式”。代码的可读性和可靠性大大降低。此时，可以为这个对象创建的过程指定一个创建者，我们只需要向创建者描述该对象的一些具体细节，接下来的构造过程就统统交给创建者完成了。</p><p>构建者模式要解决的主要问题就是“不可伸缩构造方法模式”，顾名思义，对象的构造方法固定且参数较多，构造对象的时候很容易搞错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Person(String name,Integer age,Nationality nationality,SkinColor skinColor...)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>如果一直这样下去，随着属性的增多，构造方法的参数的数量也会变得越来越多，对于开发人员是非常头疼的。对属性的更改使得构造方法的维护难度增加了不少，这就是所谓的“反可伸缩构造方法模式”。</p><p>Person.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">  private final String name;</span><br><span class="line">  private final Integer age;</span><br><span class="line">  private final Nationality nationality;</span><br><span class="line"></span><br><span class="line">  public String getName() &#123;</span><br><span class="line">    return name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public Integer getAge() &#123;</span><br><span class="line">    return age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public Nationality getNationality() &#123;</span><br><span class="line">    return nationality;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public SkinColor getSkinColor() &#123;</span><br><span class="line">    return skinColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private final SkinColor skinColor;</span><br><span class="line"></span><br><span class="line">  public Person(Builder builder) &#123;</span><br><span class="line">    this.name = builder.name;</span><br><span class="line">    this.age = builder.age;</span><br><span class="line">    this.skinColor = builder.skinColor;</span><br><span class="line">    this.nationality = builder.nationality;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public static class Builder &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private Nationality nationality;</span><br><span class="line">    private SkinColor skinColor;</span><br><span class="line"></span><br><span class="line">    public Builder age(Integer age) &#123;</span><br><span class="line">      this.age = age;</span><br><span class="line">      return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Builder name(String name) &#123;</span><br><span class="line">      if (null == name) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;人必须有名字!&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      this.name = name;</span><br><span class="line">      return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Builder nationality(Nationality nationality) &#123;</span><br><span class="line">      this.nationality = nationality;</span><br><span class="line">      return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Builder skinColor(SkinColor skinColor) &#123;</span><br><span class="line">      this.skinColor = skinColor;</span><br><span class="line">      return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person build() &#123;</span><br><span class="line">      return new Person(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就可以使用 Person.Builder 来构造一个 Person 对象了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person personWang = new Person.Builder()</span><br><span class="line">    .name(&quot;小王&quot;)</span><br><span class="line">    .age(25)</span><br><span class="line">    .nationality(Nationality.CHINA)</span><br><span class="line">    .skinColor(SkinColor.YELLOW)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>建造者模式通常适用于将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。主要解决在软件架构中，有时候会出现复杂对象的创建工作，解决思路是通常由各个部分的子对象用一定的方法构造而成。并且为了适应需求的变化，这个复杂对象的内容通常也会面临着频繁的变化，但是用子对象将它们组合在一起的方式就相对容易接受这种变化了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;构建者（Builder）模式通常用于将复杂对象的构造简化，将具体的构造过程与表示分离，使同样的构建过程可以创建不同的表示。使用多个简单的对象一步一步构建成一个复杂的对象，这种类型的设计模式属于创建型模式。建造模式可以将一个复杂对象的内部组成部分，与该对象本身的创建分离开来，从而使得复杂对象的组装更灵活。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（3）装饰器</title>
    <link href="https://james.letec.top/2018/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://james.letec.top/2018/04/19/设计模式学习笔记（3）装饰器/</id>
    <published>2018-04-19T02:12:00.000Z</published>
    <updated>2018-05-13T08:18:54.141Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>装饰器（Decorator）模式用于动态地给一个对象添加一些额外的职责。 就增加功能来说， Decorator模式相比生成子类更为灵活。装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。<br><a id="more"></a><br>纯粹的装饰模式很难找到，大多数的装饰模式的实现都是“半透明”的，而不是完全透明的。换言之，允许装饰模式改变接口，增加新的方法。半透明的装饰模式是介于装饰模式和适配器模式之间的。适配器模式的用意是改变所考虑的类的接口，也可以通过改写一个或几个方法，或增加新的方法来增强或改变所考虑的类的功能。                                                                                     大多数的装饰模式实际上是半透明的装饰模式，这样的装饰模式也称做半装饰、半适配器模式。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>以下情况使用Decorator模式</p><ul><li>在不影响其他对象的情况下， 以动态、 透明的方式给单个对象添加职责。</li><li>处理那些可以撤消的职责。</li><li>当不能采用生成子类的方法进行扩充时。 一种情况是， 可能有大量独立的扩展， 为支持每一种组合将产生大量的子类， 使得子类数目呈爆炸性增长。 另一种情况可能是因为类定义被隐藏， 或类定义不能用于生成子类。</li></ul><h2 id="模式要点"><a href="#模式要点" class="headerlink" title="模式要点"></a>模式要点</h2><p><img src="https://raw.githubusercontent.com/JamesZBL/java_design_patterns/master/decorator/uml/Decorator.png" alt=""></p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>Component：定义一个对象接口， 可以给这些对象动态地添加职责。</li><li>ConcreteComponent：定义一个对象， 可以给这个对象添加一些职责。</li><li>Decorator：持有一个指向 Component 对象的引用，并定义一个与 Component 接口一致的接口。</li><li>ConcreteDecorator：一向组件添加职责。</li></ul><h3 id="协作原理"><a href="#协作原理" class="headerlink" title="协作原理"></a>协作原理</h3><ul><li>Decorator 将请求转发给它的 Component 对象， 并有可能在转发请求前后执行一些附加的动作。</li></ul><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p><img src="https://raw.githubusercontent.com/JamesZBL/java_design_patterns/master/decorator/uml/Decorator_impl.png" alt=""></p><p>铁匠和木匠同时制作一把铁锤，第一种方案是木匠制作锤把，铁匠制作锤头；第二中方案是铁匠先制作锤把再制作锤头（假定这里的木匠只会制作锤把）。制作过程分为三部分：1.对材料进行初步的检查，2.进行制造并把部件安装起来以供后面的操作，3.完成之后再次进行检查，确保没有质量问题。</p><p>首先定义“操作”接口，包括前后两次检查以及安装的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流水线上操作行为的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">checkBefore</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">chekcAfter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在只由木匠制作锤把，定义一个木匠的操作类 CarpenterOperation<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 木匠的工作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarpenterOperation</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CarpenterOperation.class);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"检查木材"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"打造锤把"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chekcAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"检查成品锤把"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于某些原因，铁匠决定自己制作锤把，现在铁匠身兼双职，将木匠的工作也承担了。定义一个铁匠操作类 HammerSmith<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 铁匠</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HammerSmithOperation</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(HammerSmithOperation.class);</span><br><span class="line">  <span class="keyword">private</span> Operation previousOperation;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HammerSmithOperation</span><span class="params">(Operation previousOperation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.previousOperation = previousOperation;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    previousOperation.checkBefore();</span><br><span class="line">    LOGGER.info(<span class="string">"检查铁材"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    previousOperation.join();</span><br><span class="line">    LOGGER.info(<span class="string">"打造锤头"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chekcAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    previousOperation.chekcAfter();</span><br><span class="line">    LOGGER.info(<span class="string">"检查成品锤头"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样实现了“操作”的接口，铁匠的每个操作都包含了木匠相应的操作，相当于对木匠的操作增加了一层包裹和扩展。这种包装就是 Decorator 模式中的装饰。</p><p>现在分别让木匠和铁匠进行一系列操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decorator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Application.class);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"仅由木匠制作锤把"</span>);</span><br><span class="line">    Operation carpenter = <span class="keyword">new</span> CarpenterOperation();</span><br><span class="line">    carpenter.checkBefore();</span><br><span class="line">    carpenter.join();</span><br><span class="line">    carpenter.chekcAfter();</span><br><span class="line"></span><br><span class="line">    LOGGER.info(<span class="string">"由铁匠完成锤把以及锤头的制作"</span>);</span><br><span class="line">    Operation hammerSmith = <span class="keyword">new</span> HammerSmithOperation(carpenter);</span><br><span class="line">    hammerSmith.checkBefore();</span><br><span class="line">    hammerSmith.join();</span><br><span class="line">    hammerSmith.chekcAfter();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">仅由木匠制作锤把</span><br><span class="line">检查木材</span><br><span class="line">打造锤把</span><br><span class="line">检查成品锤把</span><br><span class="line"></span><br><span class="line">由铁匠完成锤把以及锤头的制作</span><br><span class="line">检查木材</span><br><span class="line">检查铁材</span><br><span class="line">打造锤把</span><br><span class="line">打造锤头</span><br><span class="line">检查成品锤把</span><br><span class="line">检查成品锤头</span><br></pre></td></tr></table></figure></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>装饰模式和静态继承的机制的作用都是对现有的类增加新的功能，但装饰模式有着比静态继承更灵活的组合方式。装饰模式可以在运行的时候决定需要增加还是去除一种“装饰”以及什么“装饰”。静态继承则没有这样的灵活性，它对类功能的扩展是在运行之前就确定了的。</li><li>得益于装饰模式在组合上的灵活性和便利性，我们可以将各种装饰类进行组合，从而较为简单的创造各种不同的行为集合，实现多种多样的功能。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>装饰者的对象和它装饰的对象本质上是完全不同的，装饰模式会生成许多的对象，导致区分各种对象变得困难</li><li>由于使用相同的标识，对于程序的理解和排错过程的难度也会随之增加</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;装饰器（Decorator）模式用于动态地给一个对象添加一些额外的职责。 就增加功能来说， Decorator模式相比生成子类更为灵活。装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记（1）组合</title>
    <link href="https://james.letec.top/2018/04/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%E7%BB%84%E5%90%88/"/>
    <id>https://james.letec.top/2018/04/17/设计模式学习笔记（1）组合/</id>
    <published>2018-04-17T01:12:00.000Z</published>
    <updated>2018-04-20T06:11:22.242Z</updated>
    
    <content type="html"><![CDATA[<p>本文实例代码：<a href="https://github.com/JamesZBL/java_design_patterns" target="_blank" rel="noopener">https://github.com/JamesZBL/java_design_patterns</a></p><p>组合（Composite）模式用于将对象组合成树形结构以表示 “部分——整体” 的层次结构。它使得用户对单个对象和组合对象的使用具有一致性。<br><a id="more"></a></p><h2 id="模式要点"><a href="#模式要点" class="headerlink" title="模式要点"></a>模式要点</h2><p><img src="https://user-gold-cdn.xitu.io/2017/11/19/15fd45454f35913c?w=984&amp;h=599&amp;f=png&amp;s=48305" alt=""></p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>Component : 是组合中的所有对象的统一接口；定义了特定情况下，类应当实现的货缺省的行为；Component 声明一个接口用于访问和管理 Component 的子组件；在递归结构中定义一个接口，用于访问一个父部件，并符合条件的类中实现它，当然这个是可选的。</li><li>Leaf：在组合中表示叶节点对象，顾名思义，叶节点没有子节点。</li><li>Composite：定义有子部件的那些部件的行为，同时存储子部件，实现 Component 中与子部件有关的接口。</li><li>Client：通过Component接口，操纵组合部件的对象。<h3 id="协作原理"><a href="#协作原理" class="headerlink" title="协作原理"></a>协作原理</h3></li><li>用户使用Component类接口与组合结构中的对象进行交互。 如果接收者是一个叶节点，则直接处理请求。 如果接收者是Composite， 它通常将请求发送给它的子部件， 在转发请求之前与/或之后可能执行一些辅助操作。</li></ul><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p>在中文中，一句话是由词语组成的，而词语又由字组成；在英文中，句子由单词组成，而单词又由一个个字母组成。每个对象都可定义的它之前的或之后的内容。比如一个中文句子总是以句号结尾，一个英文单词之前通常是有空格的。这种结构可以形成了递归嵌套的结构，句子是父容器，单词是子容器，字母是叶节点。<br><img src="https://user-gold-cdn.xitu.io/2017/11/19/15fd453dc4bcfe14?w=1526&amp;h=376&amp;f=png&amp;s=39695" alt=""><br>CharacterComposite 是一个抽象类，定义了所有容器类或叶节点的接口，容器应当实现的功能有：获取子组件、对子组件进行计数、定义组件的格式化输出规则。Sentence(句子) 和 Word (单词)都属于容器，而 Character (字母)则属于叶节点，因为字母中无法再添加子组件了，它是层次结构中的最末端。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有容器的抽象父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;CharacterComposite&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(CharacterComposite character)</span> </span>&#123;</span><br><span class="line">    children.add(character);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.children.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    printBefore();</span><br><span class="line">    <span class="keyword">for</span> (CharacterComposite item : children) &#123;</span><br><span class="line">      item.print();</span><br><span class="line">    &#125;</span><br><span class="line">    printAfter();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>EnglishWord 组件前应当输出一个空格，EnglishSentence 组件后应当输出一个“.”，ChineseSentence 组件后应当输出一个“。”等。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 英文句子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnglishSentence</span> <span class="keyword">extends</span> <span class="title">CharacterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">EnglishSentence</span><span class="params">(List&lt;EnglishWord&gt; words)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (EnglishWord word : words) &#123;</span><br><span class="line">      add(word);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 英文单词</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnglishWord</span> <span class="keyword">extends</span> <span class="title">CharacterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">EnglishWord</span><span class="params">(List&lt;Character&gt; characters)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Character c : characters) &#123;</span><br><span class="line">      add(c);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Word 作为 Sentence 的子容器，Character 作为 Word 的子组件，属于叶节点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字母</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Character</span> <span class="keyword">extends</span> <span class="title">CharacterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Character</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.c = c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.print(c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Writer 为句子生成器，各个组件及子组件均由它负责填充，最终形成一个完成的结构。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语句生成器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Writer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CharacterComposite <span class="title">sentenceByChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;ChineseWord&gt; words = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    words.add(<span class="keyword">new</span> ChineseWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'我'</span>))));</span><br><span class="line">    words.add(<span class="keyword">new</span> ChineseWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'是'</span>))));</span><br><span class="line">    words.add(<span class="keyword">new</span> ChineseWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'来'</span>), <span class="keyword">new</span> Character(<span class="string">'自'</span>))));</span><br><span class="line">    words.add(<span class="keyword">new</span> ChineseWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'北'</span>), <span class="keyword">new</span> Character(<span class="string">'京'</span>))));</span><br><span class="line">    words.add(<span class="keyword">new</span> ChineseWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'的'</span>))));</span><br><span class="line">    words.add(<span class="keyword">new</span> ChineseWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'小'</span>), <span class="keyword">new</span> Character(<span class="string">'明'</span>))));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ChineseSentence(words);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CharacterComposite <span class="title">sentenceByEnglish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;EnglishWord&gt; words = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    words.add(<span class="keyword">new</span> EnglishWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'I'</span>))));</span><br><span class="line">    words.add(<span class="keyword">new</span> EnglishWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'a'</span>), <span class="keyword">new</span> Character(<span class="string">'m'</span>))));</span><br><span class="line">    words.add(<span class="keyword">new</span> EnglishWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'a'</span>))));</span><br><span class="line">    words.add(<span class="keyword">new</span> EnglishWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'s'</span>), <span class="keyword">new</span> Character(<span class="string">'t'</span>), <span class="keyword">new</span> Character(<span class="string">'u'</span>), <span class="keyword">new</span> Character(<span class="string">'d'</span>), <span class="keyword">new</span> Character(<span class="string">'e'</span>), <span class="keyword">new</span> Character(<span class="string">'n'</span>), <span class="keyword">new</span> Character(<span class="string">'t'</span>))));</span><br><span class="line">    words.add(<span class="keyword">new</span> EnglishWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'f'</span>), <span class="keyword">new</span> Character(<span class="string">'r'</span>), <span class="keyword">new</span> Character(<span class="string">'o'</span>), <span class="keyword">new</span> Character(<span class="string">'m'</span>))));</span><br><span class="line">    words.add(<span class="keyword">new</span> EnglishWord(Arrays.asList(<span class="keyword">new</span> Character(<span class="string">'L'</span>), <span class="keyword">new</span> Character(<span class="string">'o'</span>), <span class="keyword">new</span> Character(<span class="string">'n'</span>), <span class="keyword">new</span> Character(<span class="string">'d'</span>), <span class="keyword">new</span> Character(<span class="string">'o'</span>), <span class="keyword">new</span> Character(<span class="string">'n'</span>))));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EnglishSentence(words);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ul><li>Composite 模式定义了基本对象和组合对象的基本层次结构，基本对象可以组合形成更复杂的对象，这个对象还可以再次进行组合，依次类推，可以实现无限层的递归嵌套结构，上文中提到的句子-单词-字母结构即是如此。</li><li>所有的容器都是这个接口的实现，用户可以一致地使用组合结构和单个对象，用户不需要知道它是否为叶节点或包含子容器的一个组件，从而大大简化了代码结构，定义组合的类时避免了各种复杂的包含着大量判断的方法。</li><li>在增加新的组件的时候更简单，无论是新增一种容器或一个叶节点都很方便，无需单独再定义新类并且可以很容易和现有的组件或容器结合工作，客户端无需随新组件的增加而做任何改变</li><li>使代码结构更具通用性，但也存在一些问题。增加组件很方便，但无法对子组件做过多的限制，即使客户希望在容器中只增加某种特定的组件，由于使用 Composite 而无法依靠别的类做过多的约束，这些检验类型的工作就要放到运行时去做了</li></ul><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>你想表示对象的部分-整体层次结构</li><li>你希望用户忽略组合对象与单个对象的不同， 用户将统一地使用组合结构中的所有对象</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实例代码：&lt;a href=&quot;https://github.com/JamesZBL/java_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JamesZBL/java_design_patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;组合（Composite）模式用于将对象组合成树形结构以表示 “部分——整体” 的层次结构。它使得用户对单个对象和组合对象的使用具有一致性。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://james.letec.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
      <category term="设计模式" scheme="https://james.letec.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>基于 Spring Boot 2.0 构建一个 RESTful WebService</title>
    <link href="https://james.letec.top/2018/04/16/%E5%9F%BA%E4%BA%8E-Spring-Boot-2-0-%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA-RESTful-WebService/"/>
    <id>https://james.letec.top/2018/04/16/基于-Spring-Boot-2-0-构建一个-RESTful-WebService/</id>
    <published>2018-04-16T05:12:45.000Z</published>
    <updated>2018-04-17T13:08:05.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7134080-edebba8af60420c9.gif?imageMogr2/auto-orient/strip" alt=""></p><p>REST 全称是 Representational State Transfer，中文意思是“表述性状态转移”。RESTful 是关于 Web 的现有特征和使用方式的一些准则和约束。 基于 Spring MVC 的 RestController，我们可以方便的构建一个 RESTful 风格的应用。</p><a id="more"></a><h1 id="使用-Maven-创建项目"><a href="#使用-Maven-创建项目" class="headerlink" title="使用 Maven 创建项目"></a>使用 Maven 创建项目</h1><p>我们可以直接使用 <strong>IntelliJ IDEA</strong> （推荐）中的 <strong>Spring initializer</strong> 快速创建一个基于 <strong>Spring Boot</strong> 的项目，这里使用 <strong>Maven</strong> 构建， <code>pom.xml</code> 文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gs-rest-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jayway.jsonpath<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-path<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-release<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-release<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Spring Maven plugin</code> 是 Spring 针对 Maven 开发的一套插件，包含了几个强大的功能：</p><ul><li>无需过多复杂的配置即可<strong>快速构建</strong>一个可执行的 jar 包，使应用的运行可以几乎不受环境的影响</li><li>自动搜索 <code>public static void main()</code> 方法，并将其所在的类标志为<strong>启动类</strong></li><li>对 Spring Boot 的依赖进行自动化管理，所有的依赖项目版本都和 Spring Boot 父项目保持一致（默认情况下），当然也可以手动指定其他版本</li></ul><p>Spring 同样支持 <code>Gradle</code> 构建，详细配置请参考 <a href="https://spring.io/guides/gs/rest-service/" title="Build with Gradle" target="_blank" rel="noopener">Build with Gradle</a></p><h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>这里的实体类并非 <strong>ORM</strong> 中的实体类，而是 REST 中的 “资源” ，我们的 web service 要实现的功能是处理 URL 为 <code>/userinfo/1</code> 的 <code>GET</code> 请求，并将结果以 <strong>JSON</strong> 作为响应体返回，响应状态码为 <code>200 OK</code>，JSON 的格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"张三"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子简单模拟了获取 id 为 1 的用户信息，首先要创建 POJO 类 <code>User</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">long</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>Spring 默认使用 `Jackson` 作为 JSON 解析库将 POJO 类对象序列化为 JSON。</code></pre><h1 id="创建-Controller"><a href="#创建-Controller" class="headerlink" title="创建 Controller"></a>创建 Controller</h1><p>在 controller 类上添加 <code>@RestController</code> 注解即可实现将返回值序列化为 JSON 并充当响应体返回，返回的 <code>content-type</code> 为 <code>application/json</code>，请求 <code>/user/1</code> 将得 id 为 1 的用户的信息，下面是 controller 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String template = <span class="string">"张三"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">userInfo</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span><span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(id, template);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="让应用跑起来"><a href="#让应用跑起来" class="headerlink" title="让应用跑起来"></a>让应用跑起来</h1><p>传统的构建方式是生成一个 war 文件然后部署到 web 服务器上，这样有时会觉得不太方便，因此推荐使用 Spring Boot 的 Maven 插件快速生成一个独立的可执行的 jar 文件，使用 <code>java -jar</code> 命令即可启动这个应用，所有的类和资源等文件都被集成到这一个 jar 文件中，里面也包括了<strong>嵌入式</strong>的 servlet 容器（比如 Tomcat），下面是这个应用的启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SpringBootApplication</code> 这个注解是一个组合注解，它包括：</p><ul><li><code>@Configuration</code>：声明这个类是上下文中的 bean 的配置类</li><li><code>@EnableAutoConfiguration</code>：使 Spring 将上下文中扫描到的相关 bean 配置类或 properties 类，并将这些 bean 放到应用上下文中</li><li>Spring 当检测到 classpath 下有 spring-webmvc 的依赖后，会自动给应用启动类上添加 <code>@EnableWebMvc</code> 的注解，它表示这个应用是一个 web 应用，应用启动时就会执行和 web 相关的操作，比如实例化 <code>DispatcherServlet</code> 类并进行相关的配置</li><li><code>@ComponentScan</code>：使 Spring 扫描所有自定义<strong>组件类、配置类、业务类以及控制器</strong>，并将其装配</li></ul><p>在启动类中的 <code>main</code> 方法中调用 <code>SpringBootApplication.run()</code> 即可实现应用的启动，和传统 Java web 应用配置复杂的 <strong>web.xml</strong> 文件截然不同，不需要在配置上花费太多时间</p><h2 id="构建可执行的-jar"><a href="#构建可执行的-jar" class="headerlink" title="构建可执行的 jar"></a>构建可执行的 jar</h2><p>我们可以使用一条简单的命令来完成应用打包成 jar：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ./mvnw clean package</span><br></pre></td></tr></table></figure><p>执行这条命令来启动应用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> java -jar target/gs-rest-service-0.1.0.jar</span><br></pre></td></tr></table></figure><h2 id="做一些简单的测试"><a href="#做一些简单的测试" class="headerlink" title="做一些简单的测试"></a>做一些简单的测试</h2><p>在浏览器中访问 <code>htpp://localhost:8080/user/1</code>，没问题的话会得到如下响应：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"张三"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这仅仅是一个 RESTful web service，更多文档请浏览：<a href="https://spring.io/guides/gs/rest-service/" title="Building a RESTful Web Service" target="_blank" rel="noopener">Building a RESTful Web Service</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7134080-edebba8af60420c9.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;REST 全称是 Representational State Transfer，中文意思是“表述性状态转移”。RESTful 是关于 Web 的现有特征和使用方式的一些准则和约束。 基于 Spring MVC 的 RestController，我们可以方便的构建一个 RESTful 风格的应用。&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://james.letec.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Spring" scheme="https://james.letec.top/tags/Spring/"/>
    
      <category term="Spring MVC" scheme="https://james.letec.top/tags/Spring-MVC/"/>
    
      <category term="Spring Boot" scheme="https://james.letec.top/tags/Spring-Boot/"/>
    
      <category term="RESTful" scheme="https://james.letec.top/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 从 http 跳转 https</title>
    <link href="https://james.letec.top/2018/04/15/Nginx%20%E4%BB%8E%20http%20%E8%B7%B3%E8%BD%AC%20https/"/>
    <id>https://james.letec.top/2018/04/15/Nginx 从 http 跳转 https/</id>
    <published>2018-04-15T12:30:53.000Z</published>
    <updated>2018-04-24T12:34:40.387Z</updated>
    
    <content type="html"><![CDATA[<p>网站由 http 升级到 https， 原来的链接是不是就都失效了呢？其实旧链接依然可用，在 Nginx 中简单设置一下即可实现将 http 请求重定向到 https 地址。<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    ssl on;</span><br><span class="line">    # 视具体情况而定</span><br><span class="line">    ssl_certificate     /server/nginx/ssl/example.com.pem;</span><br><span class="line">    ssl_certificate_key /server/nginx/ssl/example.com.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    # location /&#123;</span><br><span class="line">        # ...</span><br><span class="line">    # &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站由 http 升级到 https， 原来的链接是不是就都失效了呢？其实旧链接依然可用，在 Nginx 中简单设置一下即可实现将 http 请求重定向到 https 地址。&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://james.letec.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://james.letec.top/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://james.letec.top/tags/Nginx/"/>
    
      <category term="https" scheme="https://james.letec.top/tags/https/"/>
    
      <category term="域名" scheme="https://james.letec.top/tags/%E5%9F%9F%E5%90%8D/"/>
    
      <category term="运维" scheme="https://james.letec.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 解决浏览器 Ajax 跨域问题</title>
    <link href="https://james.letec.top/2018/04/14/Nginx-%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8-Ajax-%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://james.letec.top/2018/04/14/Nginx-解决浏览器-Ajax-跨域问题/</id>
    <published>2018-04-14T14:52:21.000Z</published>
    <updated>2018-04-14T15:52:32.861Z</updated>
    
    <content type="html"><![CDATA[<p>跨域是指 host 为 A 页面中的 Ajax 发起指向 host B 的请求，只要 A 和 B 的协议、域名、端口、子域名其中任何一项不同，则执行的访问都会被认为是跨域的请求，几乎所有的浏览器为了安全等问题，对跨域访问做了限制，也就是无法通过浏览器发起跨域请求。跨域问题的本质是浏览器的限制。但也并不意味着浏览器根本不能发出任何跨域请求，在发起跨域请求后，浏览器总会发送一个 OPTION 请求，并根据响应的 Header 中 <code>Access-Control-Allow-Origin</code> 参数值进行下一步操作，如果这个参数不存在或不符合当前的域，则拒绝这个跨域请求。解决这个问题的一个简单方法就是使用 Nginx 反向代理。<br><a id="more"></a></p><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>现在假设在同一台主机上部署有两个网站，访问地址分别为 <code>localhost:8080</code>（A） 和 <code>localhost:8081</code>（B）， A 站的某个页面 Ajax 想要访问 B 的某个接口，以 jQuery 的 Ajax 为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.get(</span><br><span class="line">    <span class="string">"http://localhost:8081/api/orders"</span>,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>显然，在没有做任何其他配置的情况下，这个请求一定会发送失败。</p><h1 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h1><p>修改 Nginx 安装目录下 conf/nginx.conf 文件，添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location /&#123;</span><br><span class="line">        proxy_pass http://localhost:8080</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 所有跨域访问以 /api 开头</span><br><span class="line">    location /api &#123;</span><br><span class="line">        # 请求改写</span><br><span class="line">rewrite  ^/api/(.*)$ /$1 break;</span><br><span class="line">proxy_pass   http://localhost:8081;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样配置并启动 Nginx 之后，可以通过 <code>localhost</code> 的 <code>80</code> 端口 访问 <code>8080</code>和 <code>8081</code> 端口的网站</li><li>所有以 <code>/api</code> 开头的请求将被重写，然后被发送给 <code>8081</code> 端口</li><li>对请求的重写为正则式的形式： <code>^/api/(.*)$ /$1 break;</code> <code>$1</code> 表示匹配正则表达式中的第一个分组，也就是 <code>(.*)</code> 匹配的内容，将其改写为 <code>/匹配内容</code>，比如 <code>/api/abc/def/ghi</code> 将被改写为 <code>/abc/def/ghi</code>， <code>break</code> 表示一次匹配成功则结束。</li></ul><h1 id="URL-更改"><a href="#URL-更改" class="headerlink" title="URL 更改"></a>URL 更改</h1><p>原来 Ajax 请求中所有指向 <code>localhost:8081/***</code> 的请求现在都应该改成 <code>localhost/api/***</code>，比如这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.get(</span><br><span class="line">    <span class="string">"http://localhost/api/orders"</span>,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h1><p>CORS （跨域资源共享），需要设置服务端响应头中 <code>Access-Control-Allow-Origin</code> 参数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跨域是指 host 为 A 页面中的 Ajax 发起指向 host B 的请求，只要 A 和 B 的协议、域名、端口、子域名其中任何一项不同，则执行的访问都会被认为是跨域的请求，几乎所有的浏览器为了安全等问题，对跨域访问做了限制，也就是无法通过浏览器发起跨域请求。跨域问题的本质是浏览器的限制。但也并不意味着浏览器根本不能发出任何跨域请求，在发起跨域请求后，浏览器总会发送一个 OPTION 请求，并根据响应的 Header 中 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 参数值进行下一步操作，如果这个参数不存在或不符合当前的域，则拒绝这个跨域请求。解决这个问题的一个简单方法就是使用 Nginx 反向代理。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="https://james.letec.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Nginx" scheme="https://james.letec.top/tags/Nginx/"/>
    
      <category term="服务器" scheme="https://james.letec.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="架构" scheme="https://james.letec.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="Ajax" scheme="https://james.letec.top/tags/Ajax/"/>
    
      <category term="跨域" scheme="https://james.letec.top/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="CORS" scheme="https://james.letec.top/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Linux 中虚拟主机的配置 - 搭配 Nginx</title>
    <link href="https://james.letec.top/2018/04/14/Ubuntu-Linux-%E4%B8%AD%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://james.letec.top/2018/04/14/Ubuntu-Linux-中虚拟主机的配置/</id>
    <published>2018-04-14T12:30:53.000Z</published>
    <updated>2018-04-14T14:58:11.127Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟主机，正如其名，就是将一台服务器划分为多个虚拟的主机，可以将每个域名分配给不同的虚拟主机，这样可以充分利用了域名资源和硬件资源。这次我们采用 Nginx 实现虚拟主机的配置。</p><p>Nginx 是一款 free、开源的高性能 HTTP 服务器和反向代理服务器，同时可用作 IMAP、POP3、SMTP 服务器，它经常被用作 HTTP 服务器进行 Web 应用的部署使用，另外，Nginx 还经常以反向代理服务器的身份实现负载均衡。<br><a id="more"></a></p><p>使用 Nginx 配置虚拟主机只需编辑 Nginx 安装目录下 conf/nginx.conf 即可，增加一个虚拟主机只需要在配置文件中添加一个 server 节点，就像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test1.example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html;</span><br><span class="line">        root /home/www/test1/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test2.example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html;</span><br><span class="line">        root /home/www/test2/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>listen</code> 为监听的端口，本例中监听 80 端口<br><code>server_name</code> 即指定的虚拟主机名<br><code>location</code> 只 Nginx 代理的相对 URL 范围<br><code>index</code> 指主页的文件名<br><code>root</code> 为网站根目录在系统中的实际位置</p><p><code>location /</code> 表示匹配这个主机名下的所有请求，<code>server_name</code> 的值可以为 <code>*.example.com</code> 这种形式，即匹配所有以 <code>example.com</code> 结尾的主机名，亦或 <code>test.*</code>，即所有以 <code>test</code> 开头的主机名，还可以用正则表达式的形式，比如 <code>~^test\d+\.example\.com$</code>，如果使用正则表达式，最前面要加上 <code>~</code> 这个符号。</p><p>以上两个虚拟主机实现了将对不同主机名的请求指向不同的物理目录，下面介绍如何用虚拟主机实现区分端口，即将不同主机名的请求分发到不同端口上</p><p>和上面的配置写法类似：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name demo1.example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name demo2.example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8081;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>proxy_pass 表示将请求转发到某个 URL，这样便可以实现虚拟主机名和端口的映射了。如果采用一台物理机部署多个 Tocmat 服务实例则可以采用这种方式，这样就避免了暴露多个端口的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虚拟主机，正如其名，就是将一台服务器划分为多个虚拟的主机，可以将每个域名分配给不同的虚拟主机，这样可以充分利用了域名资源和硬件资源。这次我们采用 Nginx 实现虚拟主机的配置。&lt;/p&gt;
&lt;p&gt;Nginx 是一款 free、开源的高性能 HTTP 服务器和反向代理服务器，同时可用作 IMAP、POP3、SMTP 服务器，它经常被用作 HTTP 服务器进行 Web 应用的部署使用，另外，Nginx 还经常以反向代理服务器的身份实现负载均衡。&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://james.letec.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://james.letec.top/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://james.letec.top/tags/Nginx/"/>
    
      <category term="域名" scheme="https://james.letec.top/tags/%E5%9F%9F%E5%90%8D/"/>
    
      <category term="运维" scheme="https://james.letec.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="架构" scheme="https://james.letec.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="虚拟主机" scheme="https://james.letec.top/tags/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC 中 @ModelAttribute 注解的妙用</title>
    <link href="https://james.letec.top/2018/03/31/Spring-MVC-%E4%B8%AD-ModelAttribute-%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    <id>https://james.letec.top/2018/03/31/Spring-MVC-中-ModelAttribute-注解的妙用/</id>
    <published>2018-03-31T02:44:32.000Z</published>
    <updated>2018-03-31T06:03:12.288Z</updated>
    
    <content type="html"><![CDATA[<p>Spring MVC 提供的这种基于注释的编程模型，极大的简化了 web 应用的开发。其中 <code>@Controller</code> 和 <code>@RestController</code> 注解的组件使用 <code>@RequestMapping</code>、 <code>@ExceptionHandler</code> 等注解来表示请求映射，请求输入，异常处理等，使得开发者能专注于业务逻辑的编写，提高了开发效率。 带注释的控制器具有灵活的方法签名，不必扩展基类，也不需要实现特定的接口。<br><a id="more"></a></p><p>可以使用 <code>Servlet</code> 的 <code>WebApplicationContext</code> 中的标准 <code>Spring bean</code> 定义来定义控制器 bean。 所有带有 <code>@Controller</code> 注解的类会被自动检测，就像 Spring 通常的扫描方式一样，检测类路径中的 <code>@Component</code> 类，并为它们自动注册 bean 定义。 它也充当注释类的刻板，表示它可以作为一个 Web 组件。</p><p>带有 <code>@RequestMapping</code> 注解的方法叫做 <code>Handler Method</code> - 处理器方法，它的参数可以来自很多地方，比如 <code>ServletRequest</code> 、 <code>ServletResponse</code> 、 <code>HttpSession</code> 等。</p><h1 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h1><p>在控制器的处理器方法参数上添加 <code>@ModelAttribute</code> 注释可以访问模型中的属性，如果不存在这个模型，则会自动将其实例化，产生一个新的模型。 模型属性还覆盖了来自 HTTP Servlet 请求参数的名称与字段名称匹配的值，也就是请求参数如果和模型类中的域变量一致，则会自动将这些请求参数绑定到这个模型对象，这被称为数据绑定，从而避免了解析和转换每个请求参数和表单字段这样的代码。 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/componies/&#123;componyId&#125;/departments/&#123;departmentId&#125;/edit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute Department department)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>这个处理器方法中的 department 参数会被从以下几个来源进行匹配绑定：</p><ul><li>已经定义过的模型方法（带有 <code>@ModelAttribute</code> 的方法，后面解释）</li><li>HTTP Session 中和字段名匹配的会话方法（带有 <code>@SessionAttribute</code> 的方法，和模型方法类似，只是作用域不同）</li><li>经过 URL 转换器解析过的路径变量</li><li>该模型类的默认构造方法</li><li>调用具有与 Servlet 请求参数匹配的参数的 “主构造函数”; 参数名称通过 JavaBeans <code>@ConstructorProperties</code> 或通过字节码中的运行时保留参数名称确定。</li></ul><p>虽然一般都是使用模型方法 Model method 来使用属性填充模型，但另一种方法是依靠 <code>Converter&lt;String,T&gt;</code> 识别 URI 路径变量来绑定。在下面的例子中，模型属性名称 “user” 与 URI 路径变量 “user” 匹配，并且通过将 String 类型的用户名交给给已注册的 <code>Converter&lt;String,User&gt;</code> 这个转换器来生成创建模型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/users/&#123;user&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">(@ModelAttribute(<span class="string">"user"</span>)</span> User user) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在获得模型属性实例之后，请求数据就会被绑定到模型属性上。 <code>WebDataBinder</code> 负责将 Servlet 请求参数名称（查询参数或表单字段）和目标模型对象上的字段名称进行匹配。 必要时会将属性的类型进行转换后再填充对应字段。</p><p>数据绑定不能保证不会出错，发生错误时默认情况下会抛出 <code>BindException</code> 异常，但要在处理器方法中识别出这些错误，需要在 @ModelAttribute 后面添加一个 <code>BindingResult</code> 类型的参数，需要注意的是：这个参数必须和模型属性参数 (<code>@ModelAttribute</code> 参数)相邻，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/owners/&#123;componyId&#125;/departments/&#123;departmentId&#125;/edit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute(<span class="string">"compony"</span>)</span> Compony compony, BindingResult result) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"componyForm"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子表示如果用户提交的表单不符合预期的匹配规则，就会返回视图 <code>componyForm</code>。</p><p>有时候我们需要获得一个不带数据绑定的模型属性，也就是需要在处理器方法中使用 <code>new</code> 关键字来实例化一个对象。但是在 Spring MVC 中就不用这么麻烦了，我们可以将模型注入控制器并直接访问它，或者可以添加 <code>@ModelAttribute（binding = false）</code> 来表示不需要绑定数据，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserForm <span class="title">setUpForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserForm();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUser</span><span class="params">(@PathVariable String userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userRepository.findOne(userId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@Valid UserUpdateForm form, BindingResult result,</span></span></span><br><span class="line"><span class="function"><span class="params">        @ModelAttribute(binding=<span class="keyword">false</span>)</span> User user) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在参数上添加 <code>javax.validation.Valid</code> 注解或 Spring 的 <code>@Validated</code> 注解，就可以在数据绑定后使用字段校验功能了，就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/componies/&#123;componyId&#125;/departments/&#123;departmentId&#125;/edit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@Valid @ModelAttribute(<span class="string">"department"</span>)</span> Department department, BindingResult result) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"departmentForm"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写和在方法体中写 <code>model.addAttribute(&quot;compony&quot;,compony)</code> 是等价的。</p><p>需要注意的是 <code>@ModelAttribute</code> 注解如果不加，按照 <code>BeanUtils</code> 中的 <code>isSimpleProperty</code> 方法来判断，如果不属于简单类型的参数，都会被自动视为 <code>ModelAttribute</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring MVC 提供的这种基于注释的编程模型，极大的简化了 web 应用的开发。其中 &lt;code&gt;@Controller&lt;/code&gt; 和 &lt;code&gt;@RestController&lt;/code&gt; 注解的组件使用 &lt;code&gt;@RequestMapping&lt;/code&gt;、 &lt;code&gt;@ExceptionHandler&lt;/code&gt; 等注解来表示请求映射，请求输入，异常处理等，使得开发者能专注于业务逻辑的编写，提高了开发效率。 带注释的控制器具有灵活的方法签名，不必扩展基类，也不需要实现特定的接口。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="https://james.letec.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Spring" scheme="https://james.letec.top/tags/Spring/"/>
    
      <category term="Spring MVC" scheme="https://james.letec.top/tags/Spring-MVC/"/>
    
      <category term="Java" scheme="https://james.letec.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo + Github 搭建自己的博客</title>
    <link href="https://james.letec.top/2018/03/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://james.letec.top/2018/03/30/使用Hexo搭建自己的博客/</id>
    <published>2018-03-30T05:03:58.000Z</published>
    <updated>2018-03-31T05:44:28.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7134080-c5e3beb8f919e30c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Hexo 是一个快速、简洁且高效的静态博客应用，它的一大亮点是提供了强大的 CLI 工具，真正实现了一键部署。Hexo 使用 Markdown 来解析文章，可以在很短时间内渲染出简洁大方的页面。本文将从安装到部署来详细介绍 Hexo。<br><a id="more"></a><br>本文涉及到的一些工具需要一定操作基础，若有疑问，请先自行搜索学习。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Hexo 的运行和部署需要以下工具：</p><ul><li>Node.js</li><li>Git</li></ul><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>Windows 平台使用官网提供的安装包来安装，在 cmd 中验证是否安装好：<br><img src="https://upload-images.jianshu.io/upload_images/7134080-c1363a9feb73fda6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="安装-Hexo-Cli"><a href="#安装-Hexo-Cli" class="headerlink" title="安装 Hexo-Cli"></a>安装 Hexo-Cli</h2><p>安装 Node 时一般默认安装了 npm 工具，因此使用以下命令来安装 Hexo 的命令行工具 Hexo-Cli:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><p>Windows 平台下安装 git-for-windows，*nix 平台使用自带的包管理工具安装，以 Ubuntu 为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> apt-get install git</span><br></pre></td></tr></table></figure><h2 id="创建一个站点"><a href="#创建一个站点" class="headerlink" title="创建一个站点"></a>创建一个站点</h2><p>在任意位置打开 cmd，使用 <code>hexo init &lt;dir&gt;</code> 命令创建一个博客，<code>dir</code> 为博客目录名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo init &lt;folder&gt;</span><br><span class="line"><span class="meta">$</span> cd &lt;folder&gt;</span><br><span class="line"><span class="meta">$</span> npm install</span><br></pre></td></tr></table></figure><p>等待所有依赖包安装完成</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h2><p>博客根目录的 <code>_config.yml</code> 为 “站点配置文件”，包括 SEO、主题、布局、插件等配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">xxx的博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">对站点的描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">语言（中文简体为：zh-Hans）</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">时区（国内这里填写：Asia/Shanghai）</span></span><br></pre></td></tr></table></figure><p>Hexo 默认的样式大概是这样的：<br><img src="https://upload-images.jianshu.io/upload_images/7134080-df16f35a46e2c669.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>推荐使用 Next 主题</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="安装-Next-主题"><a href="#安装-Next-主题" class="headerlink" title="安装 Next 主题"></a>安装 Next 主题</h3><p>在站点根目录打开 cmd，运行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>主题相关的文件就从 Next 的 github 仓库克隆到了 themes/next 目录下，只需要在 “站点配置文件” 中将 <code>theme</code> 字段的值改为 <code>next</code> 就实现了主题的切换<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure></p><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p>Hexo 提供的命令行工具中自带服务器功能，在站点根目录运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo s</span><br></pre></td></tr></table></figure><p>当出现提示：</p><pre><code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></pre><p>的时候，就可以打开浏览器访问：<code>http://localhost:4000</code> 来查看效果了，默认效果是这样的：<br><img src="https://upload-images.jianshu.io/upload_images/7134080-c039d4e9117a5f31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>如果觉得不好看可以通过修改<code>themes/next</code>目录下 “主题配置文件” <code>_config.yml</code>来自定义主题样式，这里只介绍一些常用配置，详细配置请参考 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next 官网</a></p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>Next 的默认布局为 Muse，就是这个样子：<br><img src="https://upload-images.jianshu.io/upload_images/7134080-c039d4e9117a5f31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Next 还提供另外两种布局：</p><ul><li>Pisces</li><li>Mist</li></ul><p>我这里使用的是 Pisces，所有这样修改 “主题” 配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br></pre></td></tr></table></figure><p>Pisces 布局的效果：<br><img src="https://upload-images.jianshu.io/upload_images/7134080-a3bf55f9e72586af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>在站点根目录运行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [title]</span><br></pre></td></tr></table></figure></p><p>其中，[title] 为文章题目，运行命令后在 <code>source/_posts</code> 目录下可以看到 <code>文章题目.md</code> 这样一个文件，用任意编辑器打开这个文件，里面的内容大概是这样：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>这段内容在 Hexo 官方的叫法为 <code>Front matter</code>，在渲染文章的时候，渲染引擎会读取这段内容并在页面适当的地方展示文章的各种信息，<code>Front matter</code> 主要有一下几项：</p><ul><li>title：文章标题</li><li>date：创建日期</li><li>tags：标签</li><li>categories：分类</li></ul><p>需要注意的是，分类是具有层次性的，也就是说 <code>Python,爬虫</code> 这种分类和 <code>爬虫,Python</code> 是完全不同的，它们会被分为两类，而标签则没有这种层次性</p><p>如果觉得使用起来不是很方便，可以只给定一个分类，比如这样：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">日记</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">上海</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">旅行</span></span><br></pre></td></tr></table></figure></p><p>站点首页会以分页的方式展示最近发布的文章，默认展示全文，如果想要只展示开头部分内容，比如这种效果：<br><img src="https://upload-images.jianshu.io/upload_images/7134080-e5fa264b0b204944.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以在文章适当的位置添加 <code>&lt;!-- more --&gt;</code> 标记，这样可以在首页只展示标记之前的内容，避免首页一次加载过多内容造成不好的体验</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>如果有可用的服务器，可以使用 <code>hexo g</code> 命令，生成静态站点，通过 FTP 或其他方式将站点上传到服务器对应目录，并配合 nginx 或 Apache 服务器，即可完成部署，这里介绍一下没有服务器情况下，如何搭建一个完整的博客站点</p><p>首先要有一个 github 账号，如果没有，可到 <a href="http://github.com" target="_blank" rel="noopener">github</a> 用邮箱注册</p><p>新建一个仓库，仓库的名字必须符合 <code>&lt;用户名&gt;.github.io</code>，用户名指的是浏览 github 个人主页的时候，浏览器地址栏 <code>github.com/</code> 后面的那个名字，比如我的 <a href="http://github.com/jameszbl" target="_blank" rel="noopener">github 主页</a>，则我的用户名就是 <code>jameszbl</code>，新建仓库后会跳转到初始化页面，显示一个类似于 <code>https://github.com/jameszbl/jameszbl.github.io.git</code> 的 url， 记下这个url，稍候会用到</p><p>在 “站点配置文件” 中，找到 <code>deploy</code>，如果没有可以手动添加，像这样填写：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    - type:</span> <span class="string">git</span></span><br><span class="line">      <span class="comment"># 远端仓库地址（刚才记下的 url)</span></span><br><span class="line"><span class="attr">      repo:</span> <span class="attr">https://github.com/JamesZBL/jameszbl.github.io.git</span></span><br><span class="line"><span class="attr">      branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p><p>这里的部署配置需要安装一个插件，因此在站点根目录运行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>插件安装完成后，再执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p><p>部署插件会自动将编译完成的静态站点推送到 github 的远端仓库，等待几分钟后，访问 <code>&lt;github 用户名&gt;.github.io</code>，即可看到搭建好的效果了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7134080-c5e3beb8f919e30c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的静态博客应用，它的一大亮点是提供了强大的 CLI 工具，真正实现了一键部署。Hexo 使用 Markdown 来解析文章，可以在很短时间内渲染出简洁大方的页面。本文将从安装到部署来详细介绍 Hexo。&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="https://james.letec.top/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Linux" scheme="https://james.letec.top/tags/Linux/"/>
    
      <category term="博客" scheme="https://james.letec.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Git" scheme="https://james.letec.top/tags/Git/"/>
    
      <category term="Hexo" scheme="https://james.letec.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Spring 整合 Shiro 权限控制</title>
    <link href="https://james.letec.top/2018/03/30/Spring%E6%95%B4%E5%90%88Shiro%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>https://james.letec.top/2018/03/30/Spring整合Shiro权限控制/</id>
    <published>2018-03-30T02:50:07.000Z</published>
    <updated>2018-03-31T14:07:04.562Z</updated>
    
    <content type="html"><![CDATA[<p>Apache Shiro 是一个功能强大且灵活的开放源代码安全框架，可以细粒度地处理认证 (Authentication)，授权 (Authorization)，会话 (Session) 管理和加密 (cryptography) 等企业级应用中常见的安全控制流程。<br>Apache Shiro 的首要目标是易于使用和理解。 有时候安全性的流程控制会非常复杂，对开发人员来说是件很头疼的事情，但并不一定如此。 框架就应该尽可能地掩盖复杂性，并公开一个简洁而直观的 API，从而简化开发人员的工作，确保其应用程序安全性。这次我们聊一聊如何在 Spring Web 应用中使用 Shiro 实现权限控制。<br><a id="more"></a></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>Apache Shiro 是一个具有许多功能的综合型应用程序安全框架。 下图为 Shiro 中的最主要的几个功能：<br><img src="https://upload-images.jianshu.io/upload_images/7134080-faa18427db36e746.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>Shiro 的主要目标是“应用安全的四大基石” - 认证，授权，会话管理和加密：</p><ul><li>身份验证：也就是通常所说的 “登录”，为了证明用户的行为所有者。</li><li>授权：访问控制的过程，即确定什么用户可以访问哪些内容。</li><li>会话管理：即使在非 Web 应用程序中，也可以管理用户特定的会话，这也是 Shiro 的一大亮点。</li><li>加密技术：使用加密算法保证数据的安全，非常易于使用。</li></ul><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>从整体概念上理解，Shiro 的体系架构有三个主要的概念：Subject （主体，也就是用户），Security Manager （安全管理器）和 Realms （领域）。 下图描述了这些组件之间的关系：<br><img src="https://upload-images.jianshu.io/upload_images/7134080-0cce315aff85264c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这几大组件可以这样理解：</p><ul><li>Subject （主体）：主体是当前正在操作的用户的特定数据集合。主体可以是一个人，也可以代表第三方服务，守护进程，定时任务或类似的东西，也就是几乎所有与该应用进行交互的事物。</li><li>Security Manager （安全管理器）：它是 Shiro 的体系结构的核心，扮演了类似于一把 “伞” 的角色，它主要负责协调内部的各个组件，形成一张安全网。</li><li>Realms （领域）：Shiro 与应用程序安全数据之间的 “桥梁”。当需要实际与用户帐户等安全相关数据进行交互以执行认证和授权时，Shiro 将从 Realms 中获取这些数据。</li></ul><h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><p>在 Web 应用中，对安全的控制主要有角色、资源、权限（什么角色能访问什么资源）几个概念，一个用户可以有多个角色，一个角色也可以访问多个资源，也就是角色可以对应多个权限。落实到数据库设计上，我们至少需要建 5 张表：用户表、角色表、资源表、角色-资源表、用户-角色表，这 5 张表的结构如下：</p><p>用户表：</p><table><thead><tr><th>id</th><th>username</th><th>password</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>123456</td></tr><tr><td>2</td><td>李四</td><td>666666</td></tr><tr><td>3</td><td>王五</td><td>000000</td></tr></tbody></table><p>角色表：</p><table><thead><tr><th>id</th><th>rolename</th></tr></thead><tbody><tr><td>1</td><td>管理员</td></tr><tr><td>2</td><td>经理</td></tr><tr><td>3</td><td>员工</td></tr></tbody></table><p>资源表：</p><table><thead><tr><th>id</th><th>resname</th></tr></thead><tbody><tr><td>1</td><td>/user/add</td></tr><tr><td>2</td><td>/user/delete</td></tr><tr><td>3</td><td>/compony/info</td></tr></tbody></table><p>角色-资源表：</p><table><thead><tr><th>id</th><th>roleid</th><th>resid</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td><td>2</td></tr><tr><td>3</td><td>2</td><td>3</td></tr></tbody></table><p>用户-角色表：</p><table><thead><tr><th>id</th><th>userid</th><th>roleid</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td><td>2</td></tr><tr><td>3</td><td>1</td><td>3</td></tr></tbody></table><p>对应的 POJO 类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> Integer id;</span><br><span class="line"> <span class="keyword">private</span> String username;</span><br><span class="line"> <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//getter &amp; setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String rolename;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String resname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色-资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleRes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String roleid;</span><br><span class="line">    <span class="keyword">private</span> String resid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户-角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRole</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String userid;</span><br><span class="line">    <span class="keyword">private</span> String roleid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h1><p>Spring 与 Shiro 整合的详细步骤，请参阅我的博客 <a href="http://james.letec.top/2018/02/17/Spring%20%E5%BA%94%E7%94%A8%E4%B8%AD%E9%9B%86%E6%88%90%20Apache%20Shiro/">《 Spring 应用中整合 Apache Shiro 》</a>。<br>这里补充一下：需要提前引入 Shiro 的依赖，打开 <a href="mvnrepository.com">mvnrepository.com</a>，搜索 Shiro，我们需要前三个依赖，也就是 Shiro-Core、Shiro-Web 以及 Shiro-Spring，以 Maven 项目为例，在 <code>pom.xml</code> 中的 <code>&lt;dependencies&gt;</code> 节点下添加如下依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在 <code>application-context.xml</code> 中需要这样配置 <code>shiroFilter</code> bean:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录成功后的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/index"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非法访问跳转的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/403"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 权限配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 无需认证即可访问的静态资源，还可以添加其他 url --&gt;</span></span><br><span class="line">            /static/** = anon</span><br><span class="line">            <span class="comment">&lt;!-- 除了上述忽略的资源，其他所有资源都需要认证后才能访问 --&gt;</span></span><br><span class="line">            /** = authc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><p>接下来就需要定义 Realm 了，自定义的 Realm 集成自 <code>AuthorizingRealm</code> 类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> UserService userService;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 验证权限</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">  String loginName = SecurityUtils.getSubject().getPrincipal().toString();</span><br><span class="line">  <span class="keyword">if</span> (loginName != <span class="keyword">null</span>) &#123;</span><br><span class="line">   String userId = SecurityUtils.getSubject().getSession().getAttribute(<span class="string">"userSessionId"</span>).toString();</span><br><span class="line">   <span class="comment">// 权限信息对象,用来存放查出的用户的所有的角色及权限</span></span><br><span class="line">   SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">   <span class="comment">// 用户的角色集合</span></span><br><span class="line">   ShiroUser shiroUser = (ShiroUser) principalCollection.getPrimaryPrincipal();</span><br><span class="line">         info.setRoles(shiroUser.getRoles());</span><br><span class="line">         info.addStringPermissions(shiroUser.getUrlSet());</span><br><span class="line">   <span class="keyword">return</span> info;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 认证回调函数,登录时调用</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">  String username = (String) token.getPrincipal();</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">        sysuser.setUsername(username);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   List&lt;SysUser&gt; users = userService.findByNames(user);</span><br><span class="line">            List&lt;String&gt; roleList= userService.selectRoleNameListByUserId(users.get(<span class="number">0</span>).getId());</span><br><span class="line">   <span class="keyword">if</span> (users.size() != <span class="number">0</span>) &#123;</span><br><span class="line">    String pwd = users.get(<span class="number">0</span>).getPassword();</span><br><span class="line">    <span class="comment">// 当验证都通过后，把用户信息放在 session 里</span></span><br><span class="line">    Session session = SecurityUtils.getSubject().getSession();</span><br><span class="line">    session.setAttribute(<span class="string">"userSession"</span>, users.get(<span class="number">0</span>));</span><br><span class="line">    session.setAttribute(<span class="string">"userSessionId"</span>, users.get(<span class="number">0</span>).getId());</span><br><span class="line">    session.setAttribute(<span class="string">"userRoles"</span>, org.apache.commons.lang.StringUtils.join(roleList,<span class="string">","</span>));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username,users.get(<span class="number">0</span>).getPassword());</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 没找到该用户</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">   System.out.println(e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户授权信息缓存.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearCachedAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.clearCachedAuthorizationInfo(principals);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户信息缓存.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearCachedAuthenticationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.clearCachedAuthenticationInfo(principals);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 清除用户授权信息缓存.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearAllCachedAuthorizationInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  getAuthorizationCache().clear();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 清除用户信息缓存.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearAllCachedAuthenticationInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  getAuthenticationCache().clear();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 清空所有缓存</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearCache</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.clearCache(principals);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 清空所有认证缓存</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearAllCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  clearAllCachedAuthenticationInfo();</span><br><span class="line">  clearAllCachedAuthorizationInfo();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h1><p>最后定义一个用户登录的控制器，接受用户的登录请求：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@Valid User user,BindingResult bindingResult,RedirectAttributes redirectAttributes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//使用权限工具进行认证，登录成功后跳到 shiroFilter bean 中定义的 successUrl</span></span><br><span class="line">            SecurityUtils.getSubject().login(<span class="keyword">new</span> UsernamePasswordToken(user.getUsername(), user.getPassword()));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:index"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">"message"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>（<span class="string">"/logout"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(RedirectAttributes redirectAttributes )</span></span>&#123;</span><br><span class="line">        SecurityUtils.getSubject().logout();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache Shiro 是一个功能强大且灵活的开放源代码安全框架，可以细粒度地处理认证 (Authentication)，授权 (Authorization)，会话 (Session) 管理和加密 (cryptography) 等企业级应用中常见的安全控制流程。&lt;br&gt;Apache Shiro 的首要目标是易于使用和理解。 有时候安全性的流程控制会非常复杂，对开发人员来说是件很头疼的事情，但并不一定如此。 框架就应该尽可能地掩盖复杂性，并公开一个简洁而直观的 API，从而简化开发人员的工作，确保其应用程序安全性。这次我们聊一聊如何在 Spring Web 应用中使用 Shiro 实现权限控制。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="https://james.letec.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Shiro" scheme="https://james.letec.top/tags/Shiro/"/>
    
      <category term="Spring" scheme="https://james.letec.top/tags/Spring/"/>
    
      <category term="权限控制" scheme="https://james.letec.top/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
      <category term="安全" scheme="https://james.letec.top/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="认证" scheme="https://james.letec.top/tags/%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>基于 Spring Boot 的个人博客</title>
    <link href="https://james.letec.top/2018/03/29/%E5%9F%BA%E4%BA%8ESpringBoot%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://james.letec.top/2018/03/29/基于SpringBoot的个人博客/</id>
    <published>2018-03-29T14:14:57.000Z</published>
    <updated>2018-03-29T14:31:23.926Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://fsblog.letec.top" target="_blank" rel="noopener">在线 Demo：http://fsblog.letec.top</a><br><a href="https://github.com/jameszbl/fs-blog" target="_blank" rel="noopener">Github 地址：https://github.com/jameszbl/fs-blog</a></p><h2 id="1-涉及技术及工具"><a href="#1-涉及技术及工具" class="headerlink" title="1. 涉及技术及工具"></a>1. 涉及技术及工具</h2><ul><li>核心框架：SpringBoot</li><li>ORM 框架：MyBatis</li><li>MyBatis 工具：MyBatis Mapper</li><li>MVC 框架：Spring MVC</li><li>模板引擎：Freemarker</li><li>编译辅助插件：Lombok</li><li>CSS 框架：BootStrap 4.0</li><li>Markdown 编辑器：Editor.md</li><li>数据库：MySQL<a id="more"></a><h2 id="2-效果图"><a href="#2-效果图" class="headerlink" title="2. 效果图"></a>2. 效果图</h2><h3 id="2-1-首页"><a href="#2-1-首页" class="headerlink" title="2.1 首页"></a>2.1 首页</h3><img src="https://upload-images.jianshu.io/upload_images/7134080-9314125f0eba4b91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首页"><h4 id="2-2-博客列表页"><a href="#2-2-博客列表页" class="headerlink" title="2.2 博客列表页"></a>2.2 博客列表页</h4><img src="https://upload-images.jianshu.io/upload_images/7134080-5bc39b987193939f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="博客列表页"><h3 id="2-3-博客阅读页"><a href="#2-3-博客阅读页" class="headerlink" title="2.3 博客阅读页"></a>2.3 博客阅读页</h3><img src="https://upload-images.jianshu.io/upload_images/7134080-7f49df2f61559bcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="博客阅读"><h4 id="2-4-个人简历页"><a href="#2-4-个人简历页" class="headerlink" title="2.4 个人简历页"></a>2.4 个人简历页</h4><img src="https://upload-images.jianshu.io/upload_images/7134080-188d16150bfc2019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个人简历"><h4 id="2-5-文章编辑"><a href="#2-5-文章编辑" class="headerlink" title="2.5 文章编辑"></a>2.5 文章编辑</h4><img src="https://upload-images.jianshu.io/upload_images/7134080-05a4df2254471c7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文章编辑"><h3 id="3-构建及运行"><a href="#3-构建及运行" class="headerlink" title="3. 构建及运行"></a>3. 构建及运行</h3><h3 id="3-1-服务器环境"><a href="#3-1-服务器环境" class="headerlink" title="3.1 服务器环境"></a>3.1 服务器环境</h3></li><li>安装 <code>MySQL</code></li><li>安装 <code>Gradle</code></li><li>在项目目录下运行 <code>gradle clean build</code>，生成的 jar 包位于 <code>build/libs</code> 目录下，使用 <code>java -jar .../fsblog.jar</code> 运行</li><li>在 <code>application-dev.yml</code> 中配置数据库用户名和密码，默认为：<code>username: root password: root</code></li><li>默认自动创建数据库、数据表并自动导入初始数据，同样在<code>application-dev.yml</code>中配置<h3 id="3-2-开发环境"><a href="#3-2-开发环境" class="headerlink" title="3.2 开发环境"></a>3.2 开发环境</h3></li><li>可直接在 IntelliJ IDEA 或 Eclipse 中打开项目进行二次开发<h2 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">FS-Blog</span></span><br><span class="line">  <span class="comment"># 缓存</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    cache-names:</span> <span class="string">ehcache</span></span><br><span class="line"><span class="attr">    ehcache:</span></span><br><span class="line">      <span class="comment"># 缓存的配置文件</span></span><br><span class="line"><span class="attr">      config:</span> <span class="string">ehcache.xml</span></span><br><span class="line">  <span class="comment"># Spring Boot 热部署工具</span></span><br><span class="line"><span class="attr">  devtools:</span></span><br><span class="line"><span class="attr">    restart:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 模板引擎</span></span><br><span class="line"><span class="attr">  freemarker:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    suffix:</span> <span class="string">.ftl</span></span><br><span class="line"><span class="attr">    charset:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="comment"># 逻辑视图名（所有视图都要写在这里）</span></span><br><span class="line"><span class="attr">    view-names:</span> <span class="string">index,</span></span><br><span class="line">                <span class="string">error,</span></span><br><span class="line">                <span class="string">userlogin,</span></span><br><span class="line">                <span class="string">adminlogin,</span></span><br><span class="line">                <span class="string">register,</span></span><br><span class="line">                <span class="string">article,</span></span><br><span class="line">                <span class="string">posts,</span></span><br><span class="line">                <span class="string">admin/index,</span></span><br><span class="line">                <span class="string">admin/userlogin,</span></span><br><span class="line">                <span class="string">admin/blogadd,</span></span><br><span class="line">                <span class="string">admin/blog_manage,</span></span><br><span class="line">                <span class="string">admin/blog_modify,</span></span><br><span class="line">                <span class="string">admin/admin_user_manage,</span></span><br><span class="line">                <span class="string">admin/admin_user_pwd_modify</span></span><br><span class="line"><span class="attr">    content-type:</span> <span class="string">text/html</span></span><br><span class="line"><span class="attr">    allow-request-override:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    check-template-location:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    expose-request-attributes:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    expose-session-attributes:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    expose-spring-macro-helpers:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    request-context-attribute:</span> <span class="string">request</span></span><br><span class="line"><span class="attr">    template-loader-path:</span> <span class="attr">classpath:/templates/</span></span><br><span class="line">  <span class="comment"># 静态资源</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    chain:</span></span><br><span class="line"><span class="attr">      strategy:</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 静态资源位置</span></span><br><span class="line"><span class="attr">          paths:</span> <span class="string">/**</span></span><br><span class="line"><span class="attr">        fixed:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          paths:</span> <span class="string">/js/lib</span></span><br><span class="line"><span class="attr">          version:</span> <span class="string">v12</span></span><br><span class="line"><span class="attr">    static-locations:</span> <span class="attr">classpath:/static/,classpath:/META-INF/resources/,classpath:/resources/,classpath:/public/</span></span><br><span class="line">  <span class="comment"># 数据源</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment"># 数据库连接</span></span><br><span class="line">    <span class="comment"># 用户名</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment"># 密码</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment"># 数据库 URL</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306?useUnicode:true&amp;amp;characterEncoding:UTF-8</span></span><br><span class="line">    <span class="comment"># 数据库连接驱动</span></span><br><span class="line"><span class="attr">    driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># SQL 编码</span></span><br><span class="line"><span class="attr">    sql-script-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">    hikari:</span></span><br><span class="line">      <span class="comment"># 连接存活时间</span></span><br><span class="line"><span class="attr">      connection-timeout:</span> <span class="number">30000</span></span><br><span class="line">      <span class="comment"># 连接池容量</span></span><br><span class="line"><span class="attr">      maximum-pool-size:</span> <span class="number">50</span></span><br><span class="line"><span class="attr">      minimum-idle:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># 数据库定义</span></span><br><span class="line"><span class="attr">    schema:</span> <span class="attr">classpath:schema.sql</span></span><br><span class="line">    <span class="comment"># 测试数据</span></span><br><span class="line"><span class="attr">    data:</span> <span class="attr">classpath:data.sql</span></span><br><span class="line">    <span class="comment"># 是否自动创建数据库并自动导入初始数据</span></span><br><span class="line"><span class="attr">    initialize:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    continue-on-error:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 服务器配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">  max-http-header-size:</span> <span class="number">8192</span></span><br><span class="line"><span class="attr">  compression:</span></span><br><span class="line"><span class="attr">      min-response-size:</span> <span class="number">512</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      mime-types:</span> <span class="string">text/html,text/css,text/javascript,application/javascript,image/gif,image/png,image/jpg</span></span><br><span class="line"><span class="attr">  tomcat:</span></span><br><span class="line"><span class="attr">        maxThreads:</span> <span class="number">12</span></span><br><span class="line"><span class="attr">        minSpareThreads:</span> <span class="number">3</span></span><br><span class="line">        <span class="comment"># 访问日志</span></span><br><span class="line"><span class="attr">        accesslog:</span></span><br><span class="line"><span class="attr">          directory:</span> <span class="string">/home/fullstack/app/fullstack</span></span><br><span class="line"><span class="attr">          pattern:</span> <span class="string">combined</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 会话</span></span><br><span class="line"><span class="attr">  session:</span></span><br><span class="line"><span class="attr">    cookie:</span></span><br><span class="line">      <span class="comment"># Session 存活时间</span></span><br><span class="line"><span class="attr">      max-age:</span> <span class="number">1800</span></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="comment"># Log4j2 配置文件</span></span><br><span class="line"><span class="attr">    config:</span> <span class="attr">classpath:log4j2.xml</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">    <span class="comment"># 实体类所在包</span></span><br><span class="line"><span class="attr">    type-aliases-package:</span> <span class="string">me.zbl.fullstack.entity</span></span><br><span class="line">    <span class="comment"># xml 文件位置</span></span><br><span class="line"><span class="attr">    mapper-locations:</span> <span class="attr">classpath:mapping/*.xml</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://fsblog.letec.top&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在线 Demo：http://fsblog.letec.top&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/jameszbl/fs-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github 地址：https://github.com/jameszbl/fs-blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-涉及技术及工具&quot;&gt;&lt;a href=&quot;#1-涉及技术及工具&quot; class=&quot;headerlink&quot; title=&quot;1. 涉及技术及工具&quot;&gt;&lt;/a&gt;1. 涉及技术及工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;核心框架：SpringBoot&lt;/li&gt;
&lt;li&gt;ORM 框架：MyBatis&lt;/li&gt;
&lt;li&gt;MyBatis 工具：MyBatis Mapper&lt;/li&gt;
&lt;li&gt;MVC 框架：Spring MVC&lt;/li&gt;
&lt;li&gt;模板引擎：Freemarker&lt;/li&gt;
&lt;li&gt;编译辅助插件：Lombok&lt;/li&gt;
&lt;li&gt;CSS 框架：BootStrap 4.0&lt;/li&gt;
&lt;li&gt;Markdown 编辑器：Editor.md&lt;/li&gt;
&lt;li&gt;数据库：MySQL
    
    </summary>
    
      <category term="开源项目" scheme="https://james.letec.top/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Spring" scheme="https://james.letec.top/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://james.letec.top/tags/Spring-Boot/"/>
    
      <category term="MyBatis" scheme="https://james.letec.top/tags/MyBatis/"/>
    
      <category term="BootStrap" scheme="https://james.letec.top/tags/BootStrap/"/>
    
      <category term="个人博客" scheme="https://james.letec.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
